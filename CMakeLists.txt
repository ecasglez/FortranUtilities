cmake_minimum_required(VERSION 3.10)

project (FortranUtilities VERSION 1.0 DESCRIPTION "Useful functions for Fortran programs")

enable_language (Fortran)
set (CMAKE_CXX_STANDARD 17)
set (CMAKE_CXX_STANDARD_REQUIRED ON)

set(default_build_type "Release")

if(CMAKE_Fortran_COMPILER_ID STREQUAL "GNU")
  if(CMAKE_Fortran_COMPILER_VERSION VERSION_LESS "7.5.0")
	message(FATAL_ERROR "GNU fortran 7.5.0 or newer required")
  endif()
  set (CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -Wall -fno-unsafe-math-optimizations -frounding-math -fsignaling-nans")
  set (CMAKE_Fortran_FLAGS_RELEASE "-O2")
  set (CMAKE_Fortran_FLAGS_DEBUG "-g")
endif()

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS "7.5.0")
	message(FATAL_ERROR "GNU G++ 7.5.0 or newer required")
  endif()
  if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS "8.0.")
     add_definitions(-DGCC7)
  else ()
     add_definitions(-DGCC8)
  endif()
  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -fno-unsafe-math-optimizations -frounding-math -fsignaling-nans")
  set (CMAKE_CXX_FLAGS_RELEASE "-O2")
  set (CMAKE_CXX_FLAGS_DEBUG "-g")
endif()

#Only tested with Intel Fortran compiler 2019 so far. Could work with older versions
if (CMAKE_Fortran_COMPILER_ID STREQUAL "Intel")
  if(CMAKE_Fortran_COMPILER_VERSION VERSION_LESS "19")
      message(FATAL_ERROR "Intel Fortran Compiler 19 or newer required")
  endif()
  set (CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -warn all")
  set (CMAKE_Fortran_FLAGS_RELEASE "-O2")
  set (CMAKE_Fortran_FLAGS_DEBUG "-g")
endif()

if (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
  if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS "19")
     message(FATAL_ERROR "Intel C++ Compiler 19 or newer required")
  endif()
  add_definitions(-DICC)
  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -warn all")
  set (CMAKE_CXX_FLAGS_RELEASE "-O2")
  set (CMAKE_CXX_FLAGS_DEBUG "-g")
endif()

if (CMAKE_SYSTEM_NAME STREQUAL "Windows")
   message("-- Detecting platform: Windows")
   add_definitions(-DWIN_CPP)
else ()
   message("-- Detecting platform: Unix-based")
   add_definitions(-DLIN_CPP)
endif ()

add_subdirectory(src)

message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
