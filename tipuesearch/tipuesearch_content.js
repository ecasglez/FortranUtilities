var tipuesearch = {"pages":[{"title":" Fortran Utilities ","text":"Fortran Utilities Note This is Work-in-Progress. More functions are being added. FortranUtilities is a collection of simple functions for Fortran programs. Functions for strings, numbers, precision, statistics and files are included. See the specifications of the different functions. More functions for different tasks will be included in the future. This is a BETA version. All functions work properly on Linux using gfortran 7.5 or newer, and all functions except symlink functions work on Windows using gfortran 7.5 (MSYS2-Mingw-w64) or newer. More compilers will be tested in the future. Downloading The latest version of this library can be obtained from the GitHub repository located here . Compilation Check that you have cmake version 3.10 or newer, a Fortran compiler compatible with Fortran 2008, and a C++ compiler compatible with C++17. Download the files and enter directory FortranUtilities. Then create a build directory and enter that directory: mkdir build cd build Type: cmake .. Optionally you can select an install directory by typing: cmake .. -DCMAKE_INSTALL_PREFIX=/installation/path/ On Windows using MSYS2-Mingw-w64 use: cmake .. -G \"MinGW Makefiles\" Compile: make On Windows using MSYS2-Mingw-w64 use instead of make: mingw32-make.exe Install: make install A static and and a shared library are created. Test programs for both libraries are created too. Documentation Documentation of the different functions is here . Usage To use the library in your programs you first need to use the module of interest, as in the following example: PROGRAM test USE FU_Strings WRITE ( * , * ) int2str ( 5 ) END PROGRAM test Then you have to link to the library when compiling. For example: To use the static library: gfortran program.f90 -lFortranUtilitiesStatic -L/path/to/the/library/folder -I/path/to/include/folder To use the shared library: gfortran program.f90 -lFortranUtilities -L/path/to/the/library/folder -I/path/to/include/folder Contact Developed by Emilio Castro. Create a Issue in GitHub if you have any suggestion, comment, enhancement, bug, etc. License These files are distributed under a MIT license. See LICENSE file for more information on using and distributing these files. Developer Info Emilio Castro","tags":"home","loc":"index.html"},{"title":"Prec_M.f90 – Fortran Utilities","text":"Contents Modules FU_Prec Source Code Prec_M.f90 Source Code !-------------------------------------------------------------------- ! FortranUtilities !-------------------------------------------------------------------- MODULE FU_Prec !! author: Emilio Castro. !! date: 13/05/2020 !! version: 1.0. !! license: MIT. !! summary: Precision parameters to use in Fortran programs. !! Precision parameters to use in Fortran programs with real or integer variable types. USE ISO_FORTRAN_ENV IMPLICIT NONE INTEGER , PARAMETER :: sp = REAL32 !! Kind parameter to specify a real type with a storage size of 32 bits. INTEGER , PARAMETER :: dp = REAL64 !! Kind parameter to specify a real type with a storage size of 64 bits. INTEGER , PARAMETER :: qp = REAL128 !! Kind parameter to specify a real type with a storage size of 128 bits. INTEGER , PARAMETER :: i8 = INT8 !! Kind parameter to specify an integer type with a storage size of 8 bits. INTEGER , PARAMETER :: i16 = INT16 !! Kind parameter to specify an integer type with a storage size of 16 bits. INTEGER , PARAMETER :: i32 = INT32 !! Kind parameter to specify an integer type with a storage size of 32 bits. INTEGER , PARAMETER :: i64 = INT64 !! Kind parameter to specify an integer type with a storage size of 64 bits. END MODULE FU_Prec","tags":"","loc":"sourcefile/prec_m.f90.html"},{"title":"Strings_M.f90 – Fortran Utilities","text":"Contents Modules FU_Strings Source Code Strings_M.f90 Source Code !-------------------------------------------------------------------- ! FortranUtilities !-------------------------------------------------------------------- MODULE FU_Strings !! author: Emilio Castro. !! date: 07/05/2020. !! version: 1.0. !! license: MIT. !! summary: Useful tools to manipulate strings in Fortran programs. !! Useful tools to manipulate strings in Fortran programs. USE FU_Prec IMPLICIT NONE PRIVATE PUBLIC :: num2str , int2str00000 , str2num PUBLIC :: startsWith , endsWith , splitstr , replace INTEGER , PARAMETER :: exit_error_code = 10 !! Error code issued by all functions in module Strings_M INTERFACE splitstr !! author: Emilio Castro. !! date: 07/05/2020. !! version: 1.0. !! license: MIT. !! summary: Splits a string. !! Splits a string and returns the portion selected by the user. MODULE PROCEDURE splitstr_i8 MODULE PROCEDURE splitstr_i16 MODULE PROCEDURE splitstr_i32 MODULE PROCEDURE splitstr_i64 END INTERFACE splitstr INTERFACE num2str !! author: Emilio Castro. !! date: 07/05/2020. !! version: 1.0. !! license: MIT. !! summary: Converts number into a string. !! Converts an integer or real variable into a string variable. !! Useful to open files named sequentially. MODULE PROCEDURE num2str_i8 MODULE PROCEDURE num2str_i16 MODULE PROCEDURE num2str_i32 MODULE PROCEDURE num2str_i64 MODULE PROCEDURE num2str_sp MODULE PROCEDURE num2str_dp MODULE PROCEDURE num2str_qp END INTERFACE num2str INTERFACE int2str00000 !! author: Emilio Castro. !! date: 07/05/2020. !! version: 1.0. !! license: MIT. !! summary: Converts an integer into a string filling with leading zeros. !! Converts an integer variable into a string variable, !! filling with leading zeros up to the limit imposed by the user. !! Useful to open files named sequentially with leading zeros in the name. MODULE PROCEDURE int2str00000_i8 MODULE PROCEDURE int2str00000_i16 MODULE PROCEDURE int2str00000_i32 MODULE PROCEDURE int2str00000_i64 END INTERFACE int2str00000 INTERFACE str2num !! author: Emilio Castro. !! date: 07/05/2020. !! version: 1.0. !! license: MIT. !! summary: Converts a string into an integer or real. !! Converts a string into an integer or real number as specified by the type of variable mold. MODULE PROCEDURE str2num_i8 MODULE PROCEDURE str2num_i16 MODULE PROCEDURE str2num_i32 MODULE PROCEDURE str2num_i64 MODULE PROCEDURE str2num_sp MODULE PROCEDURE str2num_dp MODULE PROCEDURE str2num_qp END INTERFACE str2num CONTAINS FUNCTION splitstr_i8 ( str , fieldNumber , delimiter , rev ) RESULT ( res ) CHARACTER ( LEN =* ), INTENT ( IN ) :: str !! String that the user wants to split. INTEGER ( KIND = i8 ), INTENT ( IN ) :: fieldNumber !! Integer indicating which of the divisions to return. CHARACTER ( LEN =* ), INTENT ( IN ), OPTIONAL :: delimiter !! String that the users wants to use as a delimiter for splitting. !! Optional parameter. Default is Space. LOGICAL , INTENT ( IN ), OPTIONAL :: rev !! If true start spliting by the end of the string. !! Optional parameter. Default is False. CHARACTER ( LEN = :), ALLOCATABLE :: res !! A string with the selected part of str. If the fieldNumber does not exists !! or if the delimiter does not exists it returns an empty string. !Local CHARACTER ( LEN = :), ALLOCATABLE :: d !delimiter INTEGER ( KIND = i8 ) :: i INTEGER :: pos INCLUDE 'Strings_M/include_splitstr.f90' END FUNCTION splitstr_i8 FUNCTION splitstr_i16 ( str , fieldNumber , delimiter , rev ) RESULT ( res ) CHARACTER ( LEN =* ) , INTENT ( IN ) :: str !! String that the user wants to split. INTEGER ( KIND = i16 ), INTENT ( IN ) :: fieldNumber !! Integer indicating which of the divisions to return. CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: delimiter !! String that the users wants to use as a delimiter for splitting. !! Optional parameter. Default is Space. LOGICAL , INTENT ( IN ), OPTIONAL :: rev !! If true start spliting by the end of the string. !! Optional parameter. Default is False. CHARACTER ( LEN = :) , ALLOCATABLE :: res !! A string with the selected part of str. If the fieldNumber does not exists !! or if the delimiter does not exists it returns an empty string. !Local CHARACTER ( LEN = :), ALLOCATABLE :: d !delimiter INTEGER ( KIND = i16 ) :: i INTEGER :: pos INCLUDE 'Strings_M/include_splitstr.f90' END FUNCTION splitstr_i16 FUNCTION splitstr_i32 ( str , fieldNumber , delimiter , rev ) RESULT ( res ) CHARACTER ( LEN =* ) , INTENT ( IN ) :: str !! String that the user wants to split. INTEGER ( KIND = i32 ), INTENT ( IN ) :: fieldNumber !! Integer indicating which of the divisions to return. CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: delimiter !! String that the users wants to use as a delimiter for splitting. !! Optional parameter. Default is Space. LOGICAL , INTENT ( IN ), OPTIONAL :: rev !! If true start spliting by the end of the string. !! Optional parameter. Default is False. CHARACTER ( LEN = :) , ALLOCATABLE :: res !! A string with the selected part of str. If the fieldNumber does not exists !! or if the delimiter does not exists it returns an empty string. !Local CHARACTER ( LEN = :), ALLOCATABLE :: d !delimiter INTEGER ( KIND = i32 ) :: i INTEGER :: pos INCLUDE 'Strings_M/include_splitstr.f90' END FUNCTION splitstr_i32 FUNCTION splitstr_i64 ( str , fieldNumber , delimiter , rev ) RESULT ( res ) CHARACTER ( LEN =* ) , INTENT ( IN ) :: str !! String that the user wants to split. INTEGER ( KIND = i64 ), INTENT ( IN ) :: fieldNumber !! Integer indicating which of the divisions to return. CHARACTER ( LEN =* ) , INTENT ( IN ), OPTIONAL :: delimiter !! String that the users wants to use as a delimiter for splitting. !! Optional parameter. Default is Space. LOGICAL , INTENT ( IN ), OPTIONAL :: rev !! If true start spliting by the end of the string. !! Optional parameter. Default is False. CHARACTER ( LEN = :) , ALLOCATABLE :: res !! A string with the selected part of str. If the fieldNumber does not exists !! or if the delimiter does not exists it returns an empty string. !Local CHARACTER ( LEN = :), ALLOCATABLE :: d !delimiter INTEGER ( KIND = i64 ) :: i INTEGER :: pos INCLUDE 'Strings_M/include_splitstr.f90' END FUNCTION splitstr_i64 FUNCTION startsWith ( str , substr ) RESULT ( res ) !! author: Emilio Castro. !! date: 07/05/2020. !! version: 1.0. !! license: MIT. !! summary: Checks if a string starts with a given substring. !! Checks if a string starts with a given substring. CHARACTER ( LEN =* ), INTENT ( IN ) :: str !! String that the user wants to check how it starts. CHARACTER ( LEN =* ), INTENT ( IN ) :: substr !! Substring to search to check if str starts with it. LOGICAL :: res !! True if the string starts with the substring and False otherwise. If !! substr is empty it returns True. res = INDEX ( str , substr ) == 1 END FUNCTION startsWith FUNCTION endsWith ( str , substr ) RESULT ( res ) !! author: Emilio Castro. !! date: 07/05/2020. !! version: 1.0. !! license: MIT. !! summary: Checks if a string ends with a given substring. !! Checks if a string ends with a given substring. CHARACTER ( LEN =* ), INTENT ( IN ) :: str !! String that the user wants to check how it ends. CHARACTER ( LEN =* ), INTENT ( IN ) :: substr !! Substring to search to check if str ends with it. LOGICAL :: res !! True if the string ends with the substring and False otherwise. If !! substr is empty it returns True. res = INDEX ( str , substr , BACK = . TRUE .) == LEN ( str ) - LEN ( substr ) + 1 END FUNCTION endsWith FUNCTION num2str_i8 ( num ) RESULT ( str ) USE FU_Numbers , ONLY : count_digits_integer IMPLICIT NONE INTEGER ( KIND = i8 ), INTENT ( IN ) :: num !! Number to convert to string. CHARACTER ( LEN = :), ALLOCATABLE :: str !! String containing the number CHARACTER ( LEN = 4 ), PARAMETER :: formato = '(I0)' INCLUDE 'Strings_M/include_num2strInt.f90' END FUNCTION num2str_i8 FUNCTION num2str_i16 ( num ) RESULT ( str ) USE FU_Numbers , ONLY : count_digits_integer IMPLICIT NONE INTEGER ( KIND = i16 ), INTENT ( IN ) :: num !! Number to convert to string. CHARACTER ( LEN = :), ALLOCATABLE :: str !! String containing the number CHARACTER ( LEN = 4 ), PARAMETER :: formato = '(I0)' INCLUDE 'Strings_M/include_num2strInt.f90' END FUNCTION num2str_i16 FUNCTION num2str_i32 ( num ) RESULT ( str ) USE FU_Numbers , ONLY : count_digits_integer IMPLICIT NONE INTEGER ( KIND = i32 ), INTENT ( IN ) :: num !! Number to convert to string. CHARACTER ( LEN = :), ALLOCATABLE :: str !! String containing the number CHARACTER ( LEN = 4 ), PARAMETER :: formato = '(I0)' INCLUDE 'Strings_M/include_num2strInt.f90' END FUNCTION num2str_i32 FUNCTION num2str_i64 ( num ) RESULT ( str ) USE FU_Numbers , ONLY : count_digits_integer IMPLICIT NONE INTEGER ( KIND = i64 ), INTENT ( IN ) :: num !! Number to convert to string. CHARACTER ( LEN = :), ALLOCATABLE :: str !! String containing the number CHARACTER ( LEN = 4 ), PARAMETER :: formato = '(I0)' INCLUDE 'Strings_M/include_num2strInt.f90' END FUNCTION num2str_i64 FUNCTION num2str_sp ( num , formato ) RESULT ( str ) IMPLICIT NONE REAL ( KIND = sp ) , INTENT ( IN ) :: num !! Number to convert to string. CHARACTER ( LEN =* ), INTENT ( IN ) :: formato !! Format to use in the string variable. Only for real numbers. CHARACTER ( LEN = :), ALLOCATABLE :: str !! String containing the number INTEGER :: length INCLUDE 'Strings_M/include_num2strReal.f90' END FUNCTION num2str_sp FUNCTION num2str_dp ( num , formato ) RESULT ( str ) IMPLICIT NONE REAL ( KIND = dp ) , INTENT ( IN ) :: num !! Number to convert to string. CHARACTER ( LEN =* ), INTENT ( IN ) :: formato !! Format to use in the string variable. Only for real numbers. CHARACTER ( LEN = :), ALLOCATABLE :: str !! String containing the number INTEGER :: length INCLUDE 'Strings_M/include_num2strReal.f90' END FUNCTION num2str_dp FUNCTION num2str_qp ( num , formato ) RESULT ( str ) IMPLICIT NONE REAL ( KIND = qp ) , INTENT ( IN ) :: num !! Number to convert to string. CHARACTER ( LEN =* ), INTENT ( IN ) :: formato !! Format to use in the string variable. Only for real numbers. CHARACTER ( LEN = :), ALLOCATABLE :: str !! String containing the number INTEGER :: length INCLUDE 'Strings_M/include_num2strReal.f90' END FUNCTION num2str_qp FUNCTION int2str00000_i8 ( integ , total_length ) RESULT ( str ) USE FU_Numbers , ONLY : count_digits_integer IMPLICIT NONE INTEGER ( KIND = i8 ), INTENT ( IN ) :: integ !! Integer number to convert. This number MUST be positive. INTEGER ( KIND = i8 ), INTENT ( IN ) :: total_length !! Number of digits to use, including zeros. This number MUST be positive. CHARACTER ( LEN = :), ALLOCATABLE :: str !! String containing the number. !local INTEGER ( KIND = i8 ) :: num_digits , num_zeros INCLUDE 'Strings_M/include_int2str00000.f90' END FUNCTION int2str00000_i8 FUNCTION int2str00000_i16 ( integ , total_length ) RESULT ( str ) USE FU_Numbers , ONLY : count_digits_integer IMPLICIT NONE INTEGER ( KIND = i16 ), INTENT ( IN ) :: integ !! Integer number to convert. This number MUST be positive. INTEGER ( KIND = i16 ), INTENT ( IN ) :: total_length !! Number of digits to use, including zeros. This number MUST be positive. CHARACTER ( LEN = :), ALLOCATABLE :: str !! String containing the number. !local INTEGER ( KIND = i16 ) :: num_digits , num_zeros INCLUDE 'Strings_M/include_int2str00000.f90' END FUNCTION int2str00000_i16 FUNCTION int2str00000_i32 ( integ , total_length ) RESULT ( str ) USE FU_Numbers , ONLY : count_digits_integer IMPLICIT NONE INTEGER ( KIND = i32 ), INTENT ( IN ) :: integ !! Integer number to convert. This number MUST be positive. INTEGER ( KIND = i32 ), INTENT ( IN ) :: total_length !! Number of digits to use, including zeros. This number MUST be positive. CHARACTER ( LEN = :), ALLOCATABLE :: str !! String containing the number. !local INTEGER ( KIND = i32 ) :: num_digits , num_zeros INCLUDE 'Strings_M/include_int2str00000.f90' END FUNCTION int2str00000_i32 FUNCTION int2str00000_i64 ( integ , total_length ) RESULT ( str ) USE FU_Numbers , ONLY : count_digits_integer IMPLICIT NONE INTEGER ( KIND = i64 ), INTENT ( IN ) :: integ !! Integer number to convert. This number MUST be positive. INTEGER ( KIND = i64 ), INTENT ( IN ) :: total_length !! Number of digits to use, including zeros. This number MUST be positive. CHARACTER ( LEN = :), ALLOCATABLE :: str !! String containing the number. !local INTEGER ( KIND = i64 ) :: num_digits , num_zeros INCLUDE 'Strings_M/include_int2str00000.f90' END FUNCTION int2str00000_i64 FUNCTION str2num_i8 ( str , mold ) RESULT ( res ) IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: str !! String to convert to number. INTEGER ( KIND = i8 ), INTENT ( IN ) :: mold !! Real or integer value to identify the type and kind of the output. !! It is only used to set the type of the return value, so it can be any value. INTEGER ( KIND = i8 ) :: res !! The number of the input string. INTEGER :: IOERROR CHARACTER ( LEN = 7 ), PARAMETER :: vartype = 'integer' INCLUDE 'Strings_M/include_str2num.f90' END FUNCTION str2num_i8 FUNCTION str2num_i16 ( str , mold ) RESULT ( res ) IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: str !! String to convert to number. INTEGER ( KIND = i16 ), INTENT ( IN ) :: mold !! Real or integer value to identify the type and kind of the output. !! It is only used to set the type of the return value, so it can be any value. INTEGER ( KIND = i16 ) :: res !! The number of the input string. INTEGER :: IOERROR CHARACTER ( LEN = 7 ), PARAMETER :: vartype = 'integer' INCLUDE 'Strings_M/include_str2num.f90' END FUNCTION str2num_i16 FUNCTION str2num_i32 ( str , mold ) RESULT ( res ) IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: str !! String to convert to number. INTEGER ( KIND = i32 ), INTENT ( IN ) :: mold !! Real or integer value to identify the type and kind of the output. !! It is only used to set the type of the return value, so it can be any value. INTEGER ( KIND = i32 ) :: res !! The number of the input string. INTEGER :: IOERROR CHARACTER ( LEN = 7 ), PARAMETER :: vartype = 'integer' INCLUDE 'Strings_M/include_str2num.f90' END FUNCTION str2num_i32 FUNCTION str2num_i64 ( str , mold ) RESULT ( res ) IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: str !! String to convert to number. INTEGER ( KIND = i64 ), INTENT ( IN ) :: mold !! Real or integer value to identify the type and kind of the output. !! It is only used to set the type of the return value, so it can be any value. INTEGER ( KIND = i64 ) :: res !! The number of the input string. INTEGER :: IOERROR CHARACTER ( LEN = 7 ), PARAMETER :: vartype = 'integer' INCLUDE 'Strings_M/include_str2num.f90' END FUNCTION str2num_i64 FUNCTION str2num_sp ( str , mold ) RESULT ( res ) IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: str !! String to convert to number. REAL ( KIND = sp ) , INTENT ( IN ) :: mold !! Real or integer value to identify the type and kind of the output. !! It is only used to set the type of the return value, so it can be any value. REAL ( KIND = sp ) :: res !! The number of the input string. INTEGER :: IOERROR CHARACTER ( LEN = 4 ), PARAMETER :: vartype = 'real' INCLUDE 'Strings_M/include_str2num.f90' END FUNCTION str2num_sp FUNCTION str2num_dp ( str , mold ) RESULT ( res ) IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: str !! String to convert to number. REAL ( KIND = dp ) , INTENT ( IN ) :: mold !! Real or integer value to identify the type and kind of the output. !! It is only used to set the type of the return value, so it can be any value. REAL ( KIND = dp ) :: res !! The number of the input string. INTEGER :: IOERROR CHARACTER ( LEN = 4 ), PARAMETER :: vartype = 'real' INCLUDE 'Strings_M/include_str2num.f90' END FUNCTION str2num_dp FUNCTION str2num_qp ( str , mold ) RESULT ( res ) IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: str !! String to convert to number. REAL ( KIND = qp ) , INTENT ( IN ) :: mold !! Real or integer value to identify the type and kind of the output. !! It is only used to set the type of the return value, so it can be any value. REAL ( KIND = qp ) :: res !! The number of the input string. INTEGER :: IOERROR CHARACTER ( LEN = 4 ), PARAMETER :: vartype = 'real' INCLUDE 'Strings_M/include_str2num.f90' END FUNCTION str2num_qp PURE FUNCTION replace ( str , search , repla ) RESULT ( res ) !! author: Emilio Castro. !! date: 10/07/2020. !! version: 1.0. !! license: MIT. !! summary: Searches and replaces a substring in a string !! Searches and replaces a substring in a string. It replaces !! all occurences. IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: str !! String to modify CHARACTER ( LEN =* ), INTENT ( IN ) :: search !! String to search in str. CHARACTER ( LEN =* ), INTENT ( IN ) :: repla !! String to replace in str. CHARACTER ( LEN = :), ALLOCATABLE :: res !! Modified string. INTEGER :: pos INTEGER :: lensearch CHARACTER ( LEN = :), ALLOCATABLE :: straux res = '' straux = str lensearch = LEN ( search ) pos = INDEX ( straux , search ) DO WHILE ( pos /= 0 ) res = res // straux (: pos - 1 ) // repla straux = straux ( pos + lensearch :) pos = INDEX ( straux , search ) END DO res = res // straux END FUNCTION replace PURE FUNCTION strReverse ( str ) RESULT ( res ) IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: str CHARACTER ( LEN = :), ALLOCATABLE :: res INTEGER :: i res = str FORALL ( i = 1 : len ( res )) res ( i : i ) = res ( len ( res ) - i + 1 : len ( res ) - i + 1 ) END FUNCTION strReverse END MODULE FU_Strings","tags":"","loc":"sourcefile/strings_m.f90.html"},{"title":"Statistics_M.f90 – Fortran Utilities","text":"Contents Modules FU_Statistics Source Code Statistics_M.f90 Source Code !-------------------------------------------------------------------- ! FortranUtilities !-------------------------------------------------------------------- MODULE FU_Statistics !! author: Emilio Castro. !! date: 27/05/2020. !! version: 1.0. !! license: MIT. !! summary: Statistics tools for Fortran programs. !! Statistics tools for Fortran programs. USE FU_Prec IMPLICIT NONE PRIVATE PUBLIC :: mean , gmean , variance , stdev , pvariance , pstdev INTERFACE mean !! author: Emilio Castro. !! date: 27/05/2020. !! version: 1.0. !! license: MIT. !! summary: Calculates the mean value. !! Calculates the mean value of a set of values given in a vector !! of any size with one dimension. MODULE PROCEDURE mean_sp MODULE PROCEDURE mean_dp MODULE PROCEDURE mean_qp END INTERFACE mean INTERFACE gmean !! author: Emilio Castro. !! date: 27/05/2020. !! version: 1.0. !! license: MIT. !! summary: Calculates the geometric mean. !! Calculates the geometric mean of a set of values given in a vector !! of any size with one dimension. MODULE PROCEDURE gmean_sp MODULE PROCEDURE gmean_dp MODULE PROCEDURE gmean_qp END INTERFACE gmean INTERFACE variance !! author: Emilio Castro. !! date: 09/06/2020. !! version: 1.0. !! license: MIT. !! summary: Calculates the sample variance. !! Calculates the sample variance of a set of values given in a vector !! of any size with one dimension. MODULE PROCEDURE variance_sp MODULE PROCEDURE variance_dp MODULE PROCEDURE variance_qp END INTERFACE variance INTERFACE stdev !! author: Emilio Castro. !! date: 09/06/2020. !! version: 1.0. !! license: MIT. !! summary: Calculates the sample standard deviation. !! Calculates the sample standard deviation of a set of values given in a vector !! of any size with one dimension. MODULE PROCEDURE stdev_sp MODULE PROCEDURE stdev_dp MODULE PROCEDURE stdev_qp END INTERFACE stdev INTERFACE pvariance !! author: Emilio Castro. !! date: 09/06/2020. !! version: 1.0. !! license: MIT. !! summary: Calculates the population variance. !! Calculates the population variance of a set of values given in a vector !! of any size with one dimension. MODULE PROCEDURE pvariance_sp MODULE PROCEDURE pvariance_dp MODULE PROCEDURE pvariance_qp END INTERFACE pvariance INTERFACE pstdev !! author: Emilio Castro. !! date: 09/06/2020. !! version: 1.0. !! license: MIT. !! summary: Calculates the population standard deviation. !! Calculates the population standard deviation of a set of values given in a vector !! of any size with one dimension. MODULE PROCEDURE pstdev_sp MODULE PROCEDURE pstdev_dp MODULE PROCEDURE pstdev_qp END INTERFACE pstdev CONTAINS PURE FUNCTION mean_sp ( values ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = sp ), DIMENSION (:), INTENT ( IN ) :: values !! Vector of real numbers to calculate the mean value. It can !! have any size and it must have one dimension. REAL ( KIND = sp ) :: res !! Real number with the average of values. INTEGER , PARAMETER :: prec = sp INCLUDE 'Statistics_M/include_mean.f90' END FUNCTION mean_sp PURE FUNCTION mean_dp ( values ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = dp ), DIMENSION (:), INTENT ( IN ) :: values !! Vector of real numbers to calculate the mean value. It can !! have any size and it must have one dimension. REAL ( KIND = dp ) :: res !! Real number with the average of values. INTEGER , PARAMETER :: prec = dp INCLUDE 'Statistics_M/include_mean.f90' END FUNCTION mean_dp PURE FUNCTION mean_qp ( values ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = qp ), DIMENSION (:), INTENT ( IN ) :: values !! Vector of real numbers to calculate the mean value. It can !! have any size and it must have one dimension. REAL ( KIND = qp ) :: res !! Real number with the average of values. INTEGER , PARAMETER :: prec = qp INCLUDE 'Statistics_M/include_mean.f90' END FUNCTION mean_qp PURE FUNCTION gmean_sp ( values ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = sp ), DIMENSION (:), INTENT ( IN ) :: values !! Vector of real numbers to calculate the geometric mean. It can !! have any size and it must have one dimension. REAL ( KIND = sp ) :: res !! Real number with the geometric mean of the values. INTEGER , PARAMETER :: prec = sp INCLUDE 'Statistics_M/include_gmean.f90' END FUNCTION gmean_sp PURE FUNCTION gmean_dp ( values ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = dp ), DIMENSION (:), INTENT ( IN ) :: values !! Vector of real numbers to calculate the geometric mean. It can !! have any size and it must have one dimension. REAL ( KIND = dp ) :: res !! Real number with the geometric mean of the values. INTEGER , PARAMETER :: prec = dp INCLUDE 'Statistics_M/include_gmean.f90' END FUNCTION gmean_dp PURE FUNCTION gmean_qp ( values ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = qp ), DIMENSION (:), INTENT ( IN ) :: values !! Vector of real numbers to calculate the geometric mean. It can !! have any size and it must have one dimension. REAL ( KIND = qp ) :: res !! Real number with the geometric mean of the values. INTEGER , PARAMETER :: prec = qp INCLUDE 'Statistics_M/include_gmean.f90' END FUNCTION gmean_qp PURE FUNCTION variance_sp ( values ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = sp ), DIMENSION (:), INTENT ( IN ) :: values !! Vector of real numbers to calculate the sample variance. It can !! have any size and it must have one dimension. REAL ( KIND = sp ) :: res !! Real number with the sample variance of values. INTEGER , PARAMETER :: prec = sp REAL ( KIND = sp ) :: avg INCLUDE 'Statistics_M/include_variance.f90' END FUNCTION variance_sp PURE FUNCTION variance_dp ( values ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = dp ), DIMENSION (:), INTENT ( IN ) :: values !! Vector of real numbers to calculate the sample variance. It can !! have any size and it must have one dimension. REAL ( KIND = dp ) :: res !! Real number with the sample variance of values. INTEGER , PARAMETER :: prec = dp REAL ( KIND = dp ) :: avg INCLUDE 'Statistics_M/include_variance.f90' END FUNCTION variance_dp PURE FUNCTION variance_qp ( values ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = qp ), DIMENSION (:), INTENT ( IN ) :: values !! Vector of real numbers to calculate the sample variance. It can !! have any size and it must have one dimension. REAL ( KIND = qp ) :: res !! Real number with the sample variance of values. INTEGER , PARAMETER :: prec = qp REAL ( KIND = qp ) :: avg INCLUDE 'Statistics_M/include_variance.f90' END FUNCTION variance_qp PURE FUNCTION stdev_sp ( values ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = sp ), DIMENSION (:), INTENT ( IN ) :: values !! Vector of real numbers to calculate the sample standard deviation. !! It can have any size and it must have one dimension. REAL ( KIND = sp ) :: res !! Real number with the sample standard deviation of values. res = SQRT ( variance ( values )) END FUNCTION stdev_sp PURE FUNCTION stdev_dp ( values ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = dp ), DIMENSION (:), INTENT ( IN ) :: values !! Vector of real numbers to calculate the sample standard deviation. !! It can have any size and it must have one dimension. REAL ( KIND = dp ) :: res !! Real number with the sample standard deviation of values. res = SQRT ( variance ( values )) END FUNCTION stdev_dp PURE FUNCTION stdev_qp ( values ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = qp ), DIMENSION (:), INTENT ( IN ) :: values !! Vector of real numbers to calculate the sample standard deviation. !! It can have any size and it must have one dimension. REAL ( KIND = qp ) :: res !! Real number with the sample standard deviation of values. res = SQRT ( variance ( values )) END FUNCTION stdev_qp PURE FUNCTION pvariance_sp ( values ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = sp ), DIMENSION (:), INTENT ( IN ) :: values !! Vector of real numbers to calculate the population variance. !! It can have any size and it must have one dimension. REAL ( KIND = sp ) :: res !! Real number with the variance of values. INTEGER , PARAMETER :: prec = sp res = variance ( values ) * REAL ( SIZE ( values ) - 1 , prec ) / REAL ( SIZE ( values ), prec ) END FUNCTION pvariance_sp PURE FUNCTION pvariance_dp ( values ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = dp ), DIMENSION (:), INTENT ( IN ) :: values !! Vector of real numbers to calculate the population variance. !! It can have any size and it must have one dimension. REAL ( KIND = dp ) :: res !! Real number with the variance of values. INTEGER , PARAMETER :: prec = dp res = variance ( values ) * REAL ( SIZE ( values ) - 1 , prec ) / REAL ( SIZE ( values ), prec ) END FUNCTION pvariance_dp PURE FUNCTION pvariance_qp ( values ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = qp ), DIMENSION (:), INTENT ( IN ) :: values !! Vector of real numbers to calculate the population variance. !! It can have any size and it must have one dimension. REAL ( KIND = qp ) :: res !! Real number with the variance of values. INTEGER , PARAMETER :: prec = qp res = variance ( values ) * REAL ( SIZE ( values ) - 1 , prec ) / REAL ( SIZE ( values ), prec ) END FUNCTION pvariance_qp PURE FUNCTION pstdev_sp ( values ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = sp ), DIMENSION (:), INTENT ( IN ) :: values !! Vector of real numbers to calculate the population standard deviation. !! It can have any size and it must have one dimension. REAL ( KIND = sp ) :: res !! Real number with the population standard deviation of values. res = SQRT ( pvariance ( values )) END FUNCTION pstdev_sp PURE FUNCTION pstdev_dp ( values ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = dp ), DIMENSION (:), INTENT ( IN ) :: values !! Vector of real numbers to calculate the population standard deviation. !! It can have any size and it must have one dimension. REAL ( KIND = dp ) :: res !! Real number with the population standard deviation of values. res = SQRT ( pvariance ( values )) END FUNCTION pstdev_dp PURE FUNCTION pstdev_qp ( values ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = qp ), DIMENSION (:), INTENT ( IN ) :: values !! Vector of real numbers to calculate the population standard deviation. !! It can have any size and it must have one dimension. REAL ( KIND = qp ) :: res !! Real number with the population standard deviation of values. res = SQRT ( pvariance ( values )) END FUNCTION pstdev_qp END MODULE FU_Statistics","tags":"","loc":"sourcefile/statistics_m.f90.html"},{"title":"Files_M.F90 – Fortran Utilities","text":"Contents Modules FU_Files Source Code Files_M.F90 Source Code !-------------------------------------------------------------------- ! FortranUtilities !-------------------------------------------------------------------- MODULE FU_Files !! author: Emilio Castro. !! date: 16/06/2020. !! version: 1.0. !! license: MIT. !! summary: Useful tools to manipulate files in Fortran programs. !! Useful tools to manipulate files in Fortran programs. USE iso_c_binding IMPLICIT NONE PRIVATE PUBLIC :: mkdir , cp , mv , rm , exists , is_directory , is_empty , is_regular_file #ifdef LIN_CPP PUBLIC :: is_symlink , create_symlink #endif PUBLIC :: filesep , is_path_absolute , is_path_relative , extension #ifdef WIN_CPP CHARACTER , PARAMETER :: filesep = '\\' !! Path separator: ' \\ ' for Windows and ' / ' for Linux, MacOS and other OS. #elif LIN_CPP CHARACTER,PARAMETER :: filesep = ' / ' !! Path separator: ' \\ ' for Windows and ' / ' for Linux, MacOS and other OS. #else CHARACTER,PARAMETER :: filesep = ' / ' !! Path separator: ' \\ ' for Windows and ' / ' for Linux, MacOS and other OS. #endif INTERFACE FUNCTION c_createdir(dir, ign) RESULT(res) BIND(c,name=' c_createdir ') USE iso_c_binding CHARACTER(C_CHAR), VALUE :: dir LOGICAL(C_BOOL)          :: ign LOGICAL(C_BOOL)          :: res END FUNCTION c_createdir #ifdef LIN_CPP FUNCTION c_create_symlink(src, dest, ignoreErrors) RESULT(res) BIND(c,name=' c_create_symlink ') USE iso_c_binding IMPLICIT NONE CHARACTER(C_CHAR), VALUE :: src, dest LOGICAL(C_BOOL)  , VALUE :: ignoreErrors LOGICAL(C_BOOL)          :: res END FUNCTION c_create_symlink #endif FUNCTION c_copy_file(src, dest, ignoreErrors) RESULT(res) BIND(c,name=' c_copy_file ') USE iso_c_binding IMPLICIT NONE CHARACTER(C_CHAR), VALUE :: src, dest LOGICAL(C_BOOL)  , VALUE :: ignoreErrors LOGICAL(C_BOOL)          :: res END FUNCTION c_copy_file FUNCTION c_move_file(src, dest, ignoreErrors) RESULT(res) BIND(c,name=' c_move_file ') USE iso_c_binding IMPLICIT NONE CHARACTER(C_CHAR), VALUE :: src, dest LOGICAL(C_BOOL)  , VALUE :: ignoreErrors LOGICAL(C_BOOL)          :: res END FUNCTION c_move_file FUNCTION c_remove(fname, ignoreErrors) RESULT(res) BIND(c,name=' c_remove ') USE iso_c_binding IMPLICIT NONE CHARACTER(C_CHAR), VALUE :: fname LOGICAL(C_BOOL)  , VALUE :: ignoreErrors LOGICAL(C_BOOL)          :: res END FUNCTION c_remove FUNCTION c_is_directory(fname, ignoreErrors) RESULT(res) BIND(c,name=' c_is_directory ') USE iso_c_binding CHARACTER(C_CHAR), VALUE :: fname LOGICAL(C_BOOL)  , VALUE :: ignoreErrors LOGICAL(C_BOOL)          :: res END FUNCTION c_is_directory FUNCTION c_is_empty(fname, ignoreErrors) RESULT(res) BIND(c,name=' c_is_empty ') USE iso_c_binding CHARACTER(C_CHAR), VALUE :: fname LOGICAL(C_BOOL)  , VALUE :: ignoreErrors LOGICAL(C_BOOL)          :: res END FUNCTION c_is_empty FUNCTION c_is_regular_file(fname, ignoreErrors) RESULT(res) BIND(c,name=' c_is_regular_file ') USE iso_c_binding CHARACTER(C_CHAR), VALUE :: fname LOGICAL(C_BOOL)  , VALUE :: ignoreErrors LOGICAL(C_BOOL)          :: res END FUNCTION c_is_regular_file #ifdef LIN_CPP FUNCTION c_is_symlink(fname, ignoreErrors) RESULT(res) BIND(c,name=' c_is_symlink ') USE iso_c_binding CHARACTER(C_CHAR), VALUE :: fname LOGICAL(C_BOOL)  , VALUE :: ignoreErrors LOGICAL(C_BOOL)          :: res END FUNCTION c_is_symlink #endif FUNCTION c_is_absolute(fname) RESULT(res) BIND(c,name=' c_is_absolute ') USE iso_c_binding CHARACTER(C_CHAR), VALUE :: fname LOGICAL(C_BOOL)          :: res END FUNCTION c_is_absolute FUNCTION c_is_relative(fname) RESULT(res) BIND(c,name=' c_is_relative ') USE iso_c_binding CHARACTER(C_CHAR), VALUE :: fname LOGICAL(C_BOOL)          :: res END FUNCTION c_is_relative SUBROUTINE c_extension(fname) BIND(c,name=' c_extension ' ) USE iso_c_binding CHARACTER ( C_CHAR ) :: fname ( * ) END SUBROUTINE c_extension END INTERFACE CONTAINS FUNCTION mkdir ( dir , ignoreErrors ) RESULT ( res ) !! author: Emilio Castro. !! date: 16/06/2020. !! version: 1.0. !! license: MIT. !! summary: Creates a directory. !! Creates a directory. IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: dir !! Path and name of the directory to be created. LOGICAL , OPTIONAL , INTENT ( IN ) :: ignoreErrors !! True to print a detailed description of the error message. !! Optional parameter. Default is False. LOGICAL :: res !! True if the process has been succesful. False in case of error. LOGICAL ( C_BOOL ) :: ign IF ( PRESENT ( ignoreErrors )) THEN ign = LOGICAL ( ignoreErrors , KIND = C_BOOL ) ELSE ign = . FALSE . END IF res = c_createdir ( dir // C_NULL_CHAR , ign ) END FUNCTION mkdir #ifdef LIN_CPP FUNCTION create_symlink ( src , dest , ignoreErrors ) RESULT ( res ) !! author: Emilio Castro. !! date: 16/06/2020. !! version: 1.0. !! license: MIT. !! summary: Creates a symlink to a file or directory (Linux only). !! Creates a symlink to a file or directory (Linux only). IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: src !! Name of the file or directory to be linked. CHARACTER ( LEN =* ), INTENT ( IN ) :: dest !! Name of the destination link. LOGICAL , OPTIONAL , INTENT ( IN ) :: ignoreErrors !! True to print a detailed description of the error message. !! Optional parameter. Default is False. LOGICAL :: res !! True if the process has been succesful. False in case of error. LOGICAL ( C_BOOL ) :: ign IF ( PRESENT ( ignoreErrors )) THEN ign = LOGICAL ( ignoreErrors , KIND = C_BOOL ) ELSE ign = . FALSE . END IF res = c_create_symlink ( src // C_NULL_CHAR , dest // C_NULL_CHAR , ign ) END FUNCTION create_symlink #endif FUNCTION cp ( src , dest , ignoreErrors ) RESULT ( res ) !! author: Emilio Castro. !! date: 16/06/2020. !! version: 1.0. !! license: MIT. !! summary: Copies a file or directory. !! Copies a file or directory. Directories are copied recursively. !! Existing files are overwritten. IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: src !! Name of the file to be copied. CHARACTER ( LEN =* ), INTENT ( IN ) :: dest !! Name of the destination file. LOGICAL , OPTIONAL , INTENT ( IN ) :: ignoreErrors !! True to print a detailed description of the error message. !! Optional parameter. Default is False. LOGICAL :: res !! True if the process has been succesful. False in case of error. LOGICAL ( C_BOOL ) :: ign IF ( PRESENT ( ignoreErrors )) THEN ign = LOGICAL ( ignoreErrors , KIND = C_BOOL ) ELSE ign = . FALSE . END IF res = c_copy_file ( src // C_NULL_CHAR , dest // C_NULL_CHAR , ign ) END FUNCTION cp FUNCTION mv ( src , dest , ignoreErrors ) RESULT ( res ) !! author: Emilio Castro. !! date: 16/06/2020. !! version: 1.0. !! license: MIT. !! summary: Moves or renames a file or directory. !! Moves or renames a file or directory. When moving a directory if the !! destination is an already existing directory which is not empty an error is shown !! and nothing is done. The destination folder must be removed first using function rm. IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: src !! Name of the file to be moved. CHARACTER ( LEN =* ), INTENT ( IN ) :: dest !! Name of the destination file. LOGICAL , OPTIONAL , INTENT ( IN ) :: ignoreErrors !! True to print a detailed description of the error message. !! Optional parameter. Default is False. LOGICAL :: res !! True if the process has been succesful. False in case of error. LOGICAL ( C_BOOL ) :: ign IF ( PRESENT ( ignoreErrors )) THEN ign = LOGICAL ( ignoreErrors , KIND = C_BOOL ) ELSE ign = . FALSE . END IF res = c_move_file ( src // C_NULL_CHAR , dest // C_NULL_CHAR , ign ) END FUNCTION mv FUNCTION rm ( fname , ignoreErrors ) RESULT ( res ) !! author: Emilio Castro. !! date: 16/06/2020. !! version: 1.0. !! license: MIT. !! summary: Removes a file or directory. !! Removes a file or directory. IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: fname !! Name of the file or directory to be removed. LOGICAL , OPTIONAL , INTENT ( IN ) :: ignoreErrors !! True to print a detailed description of the error message. !! Optional parameter. Default is False. LOGICAL :: res !! True if the process has been succesful. False in case of error. LOGICAL ( C_BOOL ) :: ign IF ( PRESENT ( ignoreErrors )) THEN ign = LOGICAL ( ignoreErrors , KIND = C_BOOL ) ELSE ign = . FALSE . END IF res = c_remove ( fname // C_NULL_CHAR , ign ) END FUNCTION rm FUNCTION exists ( fname ) RESULT ( res ) !! author: Emilio Castro. !! date: 16/06/2020. !! version: 1.0. !! license: MIT. !! summary: Checks if a file or directory exists. !! Checks if a file or directory exists. IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: fname !! Name of the file to be check for existence. LOGICAL :: res !! True if the file exists. False otherwise. INQUIRE ( FILE = fname , EXIST = res ) END FUNCTION exists FUNCTION is_directory ( fname , ignoreErrors ) RESULT ( res ) !! author: Emilio Castro. !! date: 16/06/2020. !! version: 1.0. !! license: MIT. !! summary: Checks if a directory exists. !! Checks if a directory exists. IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: fname !! Name of the directory to be checked. LOGICAL , OPTIONAL , INTENT ( IN ) :: ignoreErrors !! True to print a detailed description of the error message. !! Optional parameter. Default is False. LOGICAL :: res !! True if fname is a directory. False otherwise. LOGICAL ( C_BOOL ) :: ign IF ( PRESENT ( ignoreErrors )) THEN ign = LOGICAL ( ignoreErrors , KIND = C_BOOL ) ELSE ign = . FALSE . END IF res = c_is_directory ( fname // C_NULL_CHAR , ign ) END FUNCTION is_directory FUNCTION is_empty ( fname , ignoreErrors ) RESULT ( res ) !! author: Emilio Castro. !! date: 16/06/2020. !! version: 1.0. !! license: MIT. !! summary: Checks if a file is empty. !! Checks if a file is empty. IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: fname !! Name of the file to be checked. LOGICAL , OPTIONAL , INTENT ( IN ) :: ignoreErrors !! True to print a detailed description of the error message. !! Optional parameter. Default is False. LOGICAL :: res !! True if fname is an empty file. False otherwise. LOGICAL ( C_BOOL ) :: ign IF ( PRESENT ( ignoreErrors )) THEN ign = LOGICAL ( ignoreErrors , KIND = C_BOOL ) ELSE ign = . FALSE . END IF res = c_is_empty ( fname // C_NULL_CHAR , ign ) END FUNCTION is_empty FUNCTION is_regular_file ( fname , ignoreErrors ) RESULT ( res ) !! author: Emilio Castro. !! date: 16/06/2020. !! version: 1.0. !! license: MIT. !! summary: Checks if a regular file exists: it is not a directory, symlink, etc. !! Checks if a regular file exists: it is not a directory, symlink, etc. IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: fname !! Name of the file to be checked. LOGICAL , OPTIONAL , INTENT ( IN ) :: ignoreErrors !! True to print a detailed description of the error message. !! Optional parameter. Default is False. LOGICAL :: res !! True if fname is a regular file. False otherwise. LOGICAL ( C_BOOL ) :: ign IF ( PRESENT ( ignoreErrors )) THEN ign = LOGICAL ( ignoreErrors , KIND = C_BOOL ) ELSE ign = . FALSE . END IF res = c_is_regular_file ( fname // C_NULL_CHAR , ign ) END FUNCTION is_regular_file #ifdef LIN_CPP FUNCTION is_symlink ( fname , ignoreErrors ) RESULT ( res ) !! author: Emilio Castro. !! date: 16/06/2020. !! version: 1.0. !! license: MIT. !! summary: Checks if a symlink exists (Linux only). !! Checks if a symlink exists (Linux only). IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: fname !! Name of the symlink to be checked. LOGICAL , OPTIONAL , INTENT ( IN ) :: ignoreErrors !! True to print a detailed description of the error message. !! Optional parameter. Default is False. LOGICAL :: res !! True if fname is a symlink. False otherwise. LOGICAL ( C_BOOL ) :: ign IF ( PRESENT ( ignoreErrors )) THEN ign = LOGICAL ( ignoreErrors , KIND = C_BOOL ) ELSE ign = . FALSE . END IF res = c_is_symlink ( fname // C_NULL_CHAR , ign ) END FUNCTION is_symlink #endif FUNCTION is_path_absolute ( fname ) RESULT ( res ) !! author: Emilio Castro. !! date: 27/07/2020. !! version: 1.0. !! license: MIT. !! summary: Determines if a path is absolute or not !! Determines if a path is absolute or not. Returns True if path is absolute !! and False if path is relative. IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: fname !! Path to a file. LOGICAL :: res !! True if the path is absolute and false if the path is relative. res = c_is_absolute ( fname // C_NULL_CHAR ) END FUNCTION is_path_absolute FUNCTION is_path_relative ( fname ) RESULT ( res ) !! author: Emilio Castro. !! date: 27/07/2020. !! version: 1.0. !! license: MIT. !! summary: Determines if a path is relative or not !! Determines if a path is relative or not. Returns True if path is relative !! and False if path is absolute. IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: fname !! Path to a file. LOGICAL :: res !! True if the path is relative and false if the path is absolute. res = c_is_relative ( fname // C_NULL_CHAR ) END FUNCTION is_path_relative FUNCTION extension ( fname ) RESULT ( res ) !! author: Emilio Castro. !! date: 27/07/2020. !! version: 1.0. !! license: MIT. !! summary: Determines the extension of a file. !! Determines the extension of a file given its name or path. IMPLICIT NONE CHARACTER ( LEN =* ), INTENT ( IN ) :: fname !! Filename or path to a file. CHARACTER ( LEN = :), ALLOCATABLE :: res !! Extension of the file including the \"dot\". Empty path is returned if no extension is found. CHARACTER ( LEN = :, KIND = C_CHAR ), ALLOCATABLE :: c_string c_string = fname // C_NULL_CHAR CALL c_extension ( c_string ) res = c_to_f ( c_string ) END FUNCTION extension ! Auxiliary functions FUNCTION c_to_f ( c_string ) RESULT ( res ) ! Auxiliary function used as interface to convert c strings to fortran strings IMPLICIT NONE CHARACTER ( C_CHAR ) :: c_string CHARACTER ( LEN = :), ALLOCATABLE :: res INTEGER :: l !length l = 1 DO WHILE ( c_string ( l : l ) /= C_NULL_CHAR ) l = l + 1 END DO res = c_string ( 1 : l - 1 ) END FUNCTION c_to_f END MODULE FU_Files","tags":"","loc":"sourcefile/files_m.f90.html"},{"title":"Numbers_M.f90 – Fortran Utilities","text":"Contents Modules FU_Numbers Source Code Numbers_M.f90 Source Code !-------------------------------------------------------------------- ! FortranUtilities !-------------------------------------------------------------------- MODULE FU_Numbers !! author: Emilio Castro. !! date: 27/05/2020. !! version: 1.0. !! license: MIT. !! summary: Functions to analyze numbers in Fortran programs. !! Functions to analyze numbers in Fortran programs. Some of these functions (is_nan and is_inf) !! are now available in the intrinsics module IEEE_ARITHMETIC and !! are provided here only for compatibility with some old programs that use them. USE FU_Prec USE , INTRINSIC :: IEEE_ARITHMETIC IMPLICIT NONE PRIVATE PUBLIC :: is_nan , is_inf , count_digits_integer INTERFACE count_digits_integer !! author: Emilio Castro. !! date: 07/05/2020. !! version: 1.0. !! license: MIT. !! summary: Counts the number of digits of an integer. !! Counts the number of digits of an integer, including the - sign !! in case it is a negative value. MODULE PROCEDURE count_digits_integer_i8 MODULE PROCEDURE count_digits_integer_i16 MODULE PROCEDURE count_digits_integer_i32 MODULE PROCEDURE count_digits_integer_i64 END INTERFACE count_digits_integer INTERFACE is_nan !! author: Emilio Castro. !! date: 27/05/2020. !! version: 1.0. !! license: MIT. !! summary: Determines if the value of the input variable is NaN. !! Determines if the value of the input variable is NaN. MODULE PROCEDURE is_nan_sp MODULE PROCEDURE is_nan_dp MODULE PROCEDURE is_nan_qp END INTERFACE is_nan INTERFACE is_inf !! author: Emilio Castro. !! date: 27/05/2020. !! version: 1.0. !! license: MIT. !! summary: Determines if the value of the input variable is Infinity. !! Determines if the value of the input variable is NaN. MODULE PROCEDURE is_inf_sp MODULE PROCEDURE is_inf_dp MODULE PROCEDURE is_inf_qp END INTERFACE is_inf CONTAINS PURE FUNCTION count_digits_integer_i8 ( i ) RESULT ( num_digits ) IMPLICIT NONE INTEGER ( KIND = i8 ), INTENT ( IN ) :: i !! Integer number whose digits are to be counted. INTEGER ( KIND = i8 ) :: num_digits !! The number of digits of the input number. INTEGER ( KIND = i8 ), PARAMETER :: ten = 10 , one = 1 , two = 2 INTEGER ( KIND = i8 ) :: integ INCLUDE 'Numbers_M/include_count_digits_integer.f90' END FUNCTION count_digits_integer_i8 PURE FUNCTION count_digits_integer_i16 ( i ) RESULT ( num_digits ) IMPLICIT NONE INTEGER ( KIND = i16 ), INTENT ( IN ) :: i !! Integer number whose digits are to be counted. INTEGER ( KIND = i16 ) :: num_digits !! The number of digits of the input number. INTEGER ( KIND = i16 ), PARAMETER :: ten = 10 , one = 1 , two = 2 INTEGER ( KIND = i16 ) :: integ INCLUDE 'Numbers_M/include_count_digits_integer.f90' END FUNCTION count_digits_integer_i16 PURE FUNCTION count_digits_integer_i32 ( i ) RESULT ( num_digits ) IMPLICIT NONE INTEGER ( KIND = i32 ), INTENT ( IN ) :: i !! Integer number whose digits are to be counted. INTEGER ( KIND = i32 ) :: num_digits !! The number of digits of the input number. INTEGER ( KIND = i32 ), PARAMETER :: ten = 10 , one = 1 , two = 2 INTEGER ( KIND = i32 ) :: integ INCLUDE 'Numbers_M/include_count_digits_integer.f90' END FUNCTION count_digits_integer_i32 PURE FUNCTION count_digits_integer_i64 ( i ) RESULT ( num_digits ) IMPLICIT NONE INTEGER ( KIND = i64 ), INTENT ( IN ) :: i !! Integer number whose digits are to be counted. INTEGER ( KIND = i64 ) :: num_digits !! The number of digits of the input number. INTEGER ( KIND = i64 ), PARAMETER :: ten = 10 , one = 1 , two = 2 INTEGER ( KIND = i64 ) :: integ INCLUDE 'Numbers_M/include_count_digits_integer.f90' END FUNCTION count_digits_integer_i64 ELEMENTAL FUNCTION is_nan_sp ( val ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = sp ), INTENT ( IN ) :: val !! Value to analize. It can have any rank and dimension LOGICAL :: res !! True if the variable is NaN. False otherwise. It will !! have the same rank and dimension as the input value. res = ieee_is_nan ( val ) END FUNCTION is_nan_sp ELEMENTAL FUNCTION is_nan_dp ( val ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = dp ), INTENT ( IN ) :: val !! Value to analize. It can have any rank and dimension LOGICAL :: res !! True if the variable is NaN. False otherwise. It will !! have the same rank and dimension as the input value. res = ieee_is_nan ( val ) END FUNCTION is_nan_dp ELEMENTAL FUNCTION is_nan_qp ( val ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = qp ), INTENT ( IN ) :: val !! Value to analize. It can have any rank and dimension LOGICAL :: res !! True if the variable is NaN. False otherwise. It will !! have the same rank and dimension as the input value. res = ieee_is_nan ( val ) END FUNCTION is_nan_qp ELEMENTAL FUNCTION is_inf_sp ( val ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = sp ), INTENT ( IN ) :: val !! Value to analize. It can have any rank and dimension LOGICAL :: res !! True if the variable is Inf. False otherwise. It will !! have the same rank and dimension as the input value. res = . NOT . ieee_is_finite ( val ) END FUNCTION is_inf_sp ELEMENTAL FUNCTION is_inf_dp ( val ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = dp ), INTENT ( IN ) :: val !! Value to analize. It can have any rank and dimension LOGICAL :: res !! True if the variable is Inf. False otherwise. It will !! have the same rank and dimension as the input value. res = . NOT . ieee_is_finite ( val ) END FUNCTION is_inf_dp ELEMENTAL FUNCTION is_inf_qp ( val ) RESULT ( res ) IMPLICIT NONE REAL ( KIND = qp ), INTENT ( IN ) :: val !! Value to analize. It can have any rank and dimension LOGICAL :: res !! True if the variable is Inf. False otherwise. It will !! have the same rank and dimension as the input value. res = . NOT . ieee_is_finite ( val ) END FUNCTION is_inf_qp END MODULE FU_Numbers","tags":"","loc":"sourcefile/numbers_m.f90.html"},{"title":"include_gmean.f90 – Fortran Utilities","text":"Contents Source Code include_gmean.f90 Source Code res = PRODUCT ( values ) ** ( 1._prec / REAL ( SIZE ( values ), prec ))","tags":"","loc":"sourcefile/include_gmean.f90.html"},{"title":"include_mean.f90 – Fortran Utilities","text":"Contents Source Code include_mean.f90 Source Code res = SUM ( values ) / REAL ( SIZE ( values ), prec )","tags":"","loc":"sourcefile/include_mean.f90.html"},{"title":"include_variance.f90 – Fortran Utilities","text":"Contents Source Code include_variance.f90 Source Code avg = mean ( values ) res = SUM (( values (:) - avg ) ** 2 ) res = res / REAL ( SIZE ( values ) - 1 , prec )","tags":"","loc":"sourcefile/include_variance.f90.html"},{"title":"include_num2strInt.f90 – Fortran Utilities","text":"Contents Source Code include_num2strInt.f90 Source Code ALLOCATE ( character ( len = count_digits_integer ( num )) :: str ) WRITE ( str , formato ) num","tags":"","loc":"sourcefile/include_num2strint.f90.html"},{"title":"include_str2num.f90 – Fortran Utilities","text":"Contents Source Code include_str2num.f90 Source Code IF (. FALSE .) res = mold !To disable compilation warning about unused variable READ ( str , * , IOSTAT = IOERROR ) res IF ( IOERROR /= 0 ) THEN WRITE ( * , '(A)' ) 'ERROR in str2num: Inserted string is not an ' // vartype // ' number' STOP exit_error_code END IF","tags":"","loc":"sourcefile/include_str2num.f90.html"},{"title":"include_splitstr.f90 – Fortran Utilities","text":"Contents Source Code include_splitstr.f90 Source Code IF ( PRESENT ( delimiter )) THEN d = delimiter ELSE d = ' ' END IF res = str IF ( PRESENT ( rev )) THEN IF ( rev ) THEN res = strReverse ( res ) END IF END IF ! If the delimiter is in the first positions of the string, remove it IF ( INDEX ( res , d ) == 1 ) THEN res = res ( LEN ( d ) + 1 :) END IF DO i = 1 , fieldNumber pos = INDEX ( res , d ) IF ( pos == 0 ) THEN IF ( i /= fieldNumber ) THEN res = '' END IF EXIT ELSE IF ( i == fieldNumber ) THEN res = res (: pos - 1 ) ELSE res = res ( pos + LEN ( d ):) END IF END DO IF ( PRESENT ( rev )) THEN IF ( rev ) THEN res = strReverse ( res ) END IF END IF","tags":"","loc":"sourcefile/include_splitstr.f90.html"},{"title":"include_int2str00000.f90 – Fortran Utilities","text":"Contents Source Code include_int2str00000.f90 Source Code IF ( integ < 0 ) THEN WRITE ( * , '(A)' ) 'ERROR in int2str00000: Number is negative' STOP exit_error_code END IF num_digits = count_digits_integer ( integ ) IF ( num_digits > total_length ) THEN WRITE ( * , '(A)' ) 'ERROR in int2str00000: Total length is not enough' STOP exit_error_code END IF num_zeros = total_length - num_digits !Automatic allocation is not allowed in the write statements. ALLOCATE ( character ( len = total_length ) :: str ) str ( 1 : num_zeros ) = REPEAT ( '0' , num_zeros ) WRITE ( str ( num_zeros + 1 :), '(I0)' ) integ","tags":"","loc":"sourcefile/include_int2str00000.f90.html"},{"title":"include_num2strReal.f90 – Fortran Utilities","text":"Contents Source Code include_num2strReal.f90 Source Code IF ( startsWith ( formato , '(' ) . OR . endsWith ( formato , ')' )) THEN WRITE ( * , * ) 'ERROR in num2str. Format description does not have to include \"(\" at the begining nor& & \")\" at the end' STOP exit_error_code END IF !adding the following statement in the allocate statement wihtout using !variable length is causing memory leaks in valgrind. Using length to !store the information fixes those memory leaks. length = str2num ( splitstr ( formato ( 2 :), 1 , '.' ), 1_i16 ) ALLOCATE ( character ( len = length ) :: str ) WRITE ( str , '(' // formato // ')' ) num","tags":"","loc":"sourcefile/include_num2strreal.f90.html"},{"title":"include_count_digits_integer.f90 – Fortran Utilities","text":"Contents Source Code include_count_digits_integer.f90 Source Code IF ( i < 0 ) THEN num_digits = two ELSE num_digits = one END IF integ = ABS ( i ) integ = integ / ten DO WHILE ( integ /= 0 ) num_digits = num_digits + one integ = integ / ten END DO","tags":"","loc":"sourcefile/include_count_digits_integer.f90.html"},{"title":"startsWith – Fortran Utilities","text":"public function startsWith(str, substr) result(res) Checks if a string starts with a given substring. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String that the user wants to check how it starts. character(len=*), intent(in) :: substr Substring to search to check if str starts with it. Return Value logical True if the string starts with the substring and False otherwise. If\n substr is empty it returns True. Contents None","tags":"","loc":"proc/startswith.html"},{"title":"endsWith – Fortran Utilities","text":"public function endsWith(str, substr) result(res) Checks if a string ends with a given substring. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String that the user wants to check how it ends. character(len=*), intent(in) :: substr Substring to search to check if str ends with it. Return Value logical True if the string ends with the substring and False otherwise. If \n substr is empty it returns True. Contents None","tags":"","loc":"proc/endswith.html"},{"title":"replace – Fortran Utilities","text":"public pure function replace(str, search, repla) result(res) Searches and replaces a substring in a string. It replaces \n all occurences. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String to modify character(len=*), intent(in) :: search String to search in str. character(len=*), intent(in) :: repla String to replace in str. Return Value character(len=:),\n  ALLOCATABLE Modified string. Contents None","tags":"","loc":"proc/replace.html"},{"title":"splitstr – Fortran Utilities","text":"public interface splitstr Splits a string and returns the portion selected by the user. Contents Module Procedures splitstr_i8 splitstr_i16 splitstr_i32 splitstr_i64 Module Procedures private function splitstr_i8(str, fieldNumber, delimiter, rev) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String that the user wants to split. integer(kind=i8), intent(in) :: fieldNumber Integer indicating which of the divisions to return. character(len=*), intent(in), optional :: delimiter String that the users wants to use as a delimiter for splitting.\n Optional parameter. Default is Space. logical, intent(in), optional :: rev If true start spliting by the end of the string.\n Optional parameter. Default is False. Return Value character(len=:),\n  ALLOCATABLE A string with the selected part of str. If the fieldNumber does not exists\n or if the delimiter does not exists it returns an empty string. private function splitstr_i16(str, fieldNumber, delimiter, rev) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String that the user wants to split. integer(kind=i16), intent(in) :: fieldNumber Integer indicating which of the divisions to return. character(len=*), intent(in), optional :: delimiter String that the users wants to use as a delimiter for splitting.\n Optional parameter. Default is Space. logical, intent(in), optional :: rev If true start spliting by the end of the string.\n Optional parameter. Default is False. Return Value character(len=:),\n  ALLOCATABLE A string with the selected part of str. If the fieldNumber does not exists\n or if the delimiter does not exists it returns an empty string. private function splitstr_i32(str, fieldNumber, delimiter, rev) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String that the user wants to split. integer(kind=i32), intent(in) :: fieldNumber Integer indicating which of the divisions to return. character(len=*), intent(in), optional :: delimiter String that the users wants to use as a delimiter for splitting.\n Optional parameter. Default is Space. logical, intent(in), optional :: rev If true start spliting by the end of the string.\n Optional parameter. Default is False. Return Value character(len=:),\n  ALLOCATABLE A string with the selected part of str. If the fieldNumber does not exists\n or if the delimiter does not exists it returns an empty string. private function splitstr_i64(str, fieldNumber, delimiter, rev) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String that the user wants to split. integer(kind=i64), intent(in) :: fieldNumber Integer indicating which of the divisions to return. character(len=*), intent(in), optional :: delimiter String that the users wants to use as a delimiter for splitting.\n Optional parameter. Default is Space. logical, intent(in), optional :: rev If true start spliting by the end of the string.\n Optional parameter. Default is False. Return Value character(len=:),\n  ALLOCATABLE A string with the selected part of str. If the fieldNumber does not exists\n or if the delimiter does not exists it returns an empty string.","tags":"","loc":"interface/splitstr.html"},{"title":"num2str – Fortran Utilities","text":"public interface num2str Converts an integer or real variable into a string variable.\n Useful to open files named sequentially. Contents Module Procedures num2str_i8 num2str_i16 num2str_i32 num2str_i64 num2str_sp num2str_dp num2str_qp Module Procedures private function num2str_i8(num) result(str) Arguments Type Intent Optional Attributes Name integer(kind=i8), intent(in) :: num Number to convert to string. Return Value character(len=:),\n  ALLOCATABLE String containing the number private function num2str_i16(num) result(str) Arguments Type Intent Optional Attributes Name integer(kind=i16), intent(in) :: num Number to convert to string. Return Value character(len=:),\n  ALLOCATABLE String containing the number private function num2str_i32(num) result(str) Arguments Type Intent Optional Attributes Name integer(kind=i32), intent(in) :: num Number to convert to string. Return Value character(len=:),\n  ALLOCATABLE String containing the number private function num2str_i64(num) result(str) Arguments Type Intent Optional Attributes Name integer(kind=i64), intent(in) :: num Number to convert to string. Return Value character(len=:),\n  ALLOCATABLE String containing the number private function num2str_sp(num, formato) result(str) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: num Number to convert to string. character(len=*), intent(in) :: formato Format to use in the string variable. Only for real numbers. Return Value character(len=:),\n  ALLOCATABLE String containing the number private function num2str_dp(num, formato) result(str) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: num Number to convert to string. character(len=*), intent(in) :: formato Format to use in the string variable. Only for real numbers. Return Value character(len=:),\n  ALLOCATABLE String containing the number private function num2str_qp(num, formato) result(str) Arguments Type Intent Optional Attributes Name real(kind=qp), intent(in) :: num Number to convert to string. character(len=*), intent(in) :: formato Format to use in the string variable. Only for real numbers. Return Value character(len=:),\n  ALLOCATABLE String containing the number","tags":"","loc":"interface/num2str.html"},{"title":"int2str00000 – Fortran Utilities","text":"public interface int2str00000 Converts an integer variable into a string variable,\n filling with leading zeros up to the limit imposed by the user.\n Useful to open files named sequentially with leading zeros in the name. Contents Module Procedures int2str00000_i8 int2str00000_i16 int2str00000_i32 int2str00000_i64 Module Procedures private function int2str00000_i8(integ, total_length) result(str) Arguments Type Intent Optional Attributes Name integer(kind=i8), intent(in) :: integ Integer number to convert. This number MUST be positive. integer(kind=i8), intent(in) :: total_length Number of digits to use, including zeros. This number MUST be positive. Return Value character(len=:),\n  ALLOCATABLE String containing the number. private function int2str00000_i16(integ, total_length) result(str) Arguments Type Intent Optional Attributes Name integer(kind=i16), intent(in) :: integ Integer number to convert. This number MUST be positive. integer(kind=i16), intent(in) :: total_length Number of digits to use, including zeros. This number MUST be positive. Return Value character(len=:),\n  ALLOCATABLE String containing the number. private function int2str00000_i32(integ, total_length) result(str) Arguments Type Intent Optional Attributes Name integer(kind=i32), intent(in) :: integ Integer number to convert. This number MUST be positive. integer(kind=i32), intent(in) :: total_length Number of digits to use, including zeros. This number MUST be positive. Return Value character(len=:),\n  ALLOCATABLE String containing the number. private function int2str00000_i64(integ, total_length) result(str) Arguments Type Intent Optional Attributes Name integer(kind=i64), intent(in) :: integ Integer number to convert. This number MUST be positive. integer(kind=i64), intent(in) :: total_length Number of digits to use, including zeros. This number MUST be positive. Return Value character(len=:),\n  ALLOCATABLE String containing the number.","tags":"","loc":"interface/int2str00000.html"},{"title":"str2num – Fortran Utilities","text":"public interface str2num Converts a string into an integer or real number as specified by the type of variable mold. Contents Module Procedures str2num_i8 str2num_i16 str2num_i32 str2num_i64 str2num_sp str2num_dp str2num_qp Module Procedures private function str2num_i8(str, mold) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String to convert to number. integer(kind=i8), intent(in) :: mold Real or integer value to identify the type and kind of the output.\n It is only used to set the type of the return value, so it can be any value. Return Value integer(kind=i8) The number of the input string. private function str2num_i16(str, mold) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String to convert to number. integer(kind=i16), intent(in) :: mold Real or integer value to identify the type and kind of the output.\n It is only used to set the type of the return value, so it can be any value. Return Value integer(kind=i16) The number of the input string. private function str2num_i32(str, mold) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String to convert to number. integer(kind=i32), intent(in) :: mold Real or integer value to identify the type and kind of the output.\n It is only used to set the type of the return value, so it can be any value. Return Value integer(kind=i32) The number of the input string. private function str2num_i64(str, mold) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String to convert to number. integer(kind=i64), intent(in) :: mold Real or integer value to identify the type and kind of the output.\n It is only used to set the type of the return value, so it can be any value. Return Value integer(kind=i64) The number of the input string. private function str2num_sp(str, mold) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String to convert to number. real(kind=sp), intent(in) :: mold Real or integer value to identify the type and kind of the output.\n It is only used to set the type of the return value, so it can be any value. Return Value real(kind=sp) The number of the input string. private function str2num_dp(str, mold) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String to convert to number. real(kind=dp), intent(in) :: mold Real or integer value to identify the type and kind of the output.\n It is only used to set the type of the return value, so it can be any value. Return Value real(kind=dp) The number of the input string. private function str2num_qp(str, mold) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String to convert to number. real(kind=qp), intent(in) :: mold Real or integer value to identify the type and kind of the output.\n It is only used to set the type of the return value, so it can be any value. Return Value real(kind=qp) The number of the input string.","tags":"","loc":"interface/str2num.html"},{"title":"mean – Fortran Utilities","text":"public interface mean Calculates the mean value of a set of values given in a vector\n of any size with one dimension. Contents Module Procedures mean_sp mean_dp mean_qp Module Procedures private pure function mean_sp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the mean value. It can\n have any size and it must have one dimension. Return Value real(kind=sp) Real number with the average of values. private pure function mean_dp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the mean value. It can\n have any size and it must have one dimension. Return Value real(kind=dp) Real number with the average of values. private pure function mean_qp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=qp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the mean value. It can\n have any size and it must have one dimension. Return Value real(kind=qp) Real number with the average of values.","tags":"","loc":"interface/mean.html"},{"title":"gmean – Fortran Utilities","text":"public interface gmean Calculates the geometric mean of a set of values given in a vector\n of any size with one dimension. Contents Module Procedures gmean_sp gmean_dp gmean_qp Module Procedures private pure function gmean_sp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the geometric mean. It can\n have any size and it must have one dimension. Return Value real(kind=sp) Real number with the geometric mean of the values. private pure function gmean_dp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the geometric mean. It can\n have any size and it must have one dimension. Return Value real(kind=dp) Real number with the geometric mean of the values. private pure function gmean_qp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=qp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the geometric mean. It can\n have any size and it must have one dimension. Return Value real(kind=qp) Real number with the geometric mean of the values.","tags":"","loc":"interface/gmean.html"},{"title":"variance – Fortran Utilities","text":"public interface variance Calculates the sample variance of a set of values given in a vector\n of any size with one dimension. Contents Module Procedures variance_sp variance_dp variance_qp Module Procedures private pure function variance_sp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the sample variance. It can\n have any size and it must have one dimension. Return Value real(kind=sp) Real number with the sample variance of values. private pure function variance_dp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the sample variance. It can\n have any size and it must have one dimension. Return Value real(kind=dp) Real number with the sample variance of values. private pure function variance_qp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=qp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the sample variance. It can\n have any size and it must have one dimension. Return Value real(kind=qp) Real number with the sample variance of values.","tags":"","loc":"interface/variance.html"},{"title":"stdev – Fortran Utilities","text":"public interface stdev Calculates the sample standard deviation of a set of values given in a vector\n of any size with one dimension. Contents Module Procedures stdev_sp stdev_dp stdev_qp Module Procedures private pure function stdev_sp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the sample standard deviation.\n It can have any size and it must have one dimension. Return Value real(kind=sp) Real number with the sample standard deviation of values. private pure function stdev_dp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the sample standard deviation.\n It can have any size and it must have one dimension. Return Value real(kind=dp) Real number with the sample standard deviation of values. private pure function stdev_qp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=qp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the sample standard deviation.\n It can have any size and it must have one dimension. Return Value real(kind=qp) Real number with the sample standard deviation of values.","tags":"","loc":"interface/stdev.html"},{"title":"pvariance – Fortran Utilities","text":"public interface pvariance Calculates the population variance of a set of values given in a vector\n of any size with one dimension. Contents Module Procedures pvariance_sp pvariance_dp pvariance_qp Module Procedures private pure function pvariance_sp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the population variance.\n It can have any size and it must have one dimension. Return Value real(kind=sp) Real number with the variance of values. private pure function pvariance_dp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the population variance.\n It can have any size and it must have one dimension. Return Value real(kind=dp) Real number with the variance of values. private pure function pvariance_qp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=qp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the population variance.\n It can have any size and it must have one dimension. Return Value real(kind=qp) Real number with the variance of values.","tags":"","loc":"interface/pvariance.html"},{"title":"pstdev – Fortran Utilities","text":"public interface pstdev Calculates the population standard deviation of a set of values given in a vector\n of any size with one dimension. Contents Module Procedures pstdev_sp pstdev_dp pstdev_qp Module Procedures private pure function pstdev_sp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the population standard deviation. \n It can have any size and it must have one dimension. Return Value real(kind=sp) Real number with the population standard deviation of values. private pure function pstdev_dp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the population standard deviation. \n It can have any size and it must have one dimension. Return Value real(kind=dp) Real number with the population standard deviation of values. private pure function pstdev_qp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=qp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the population standard deviation. \n It can have any size and it must have one dimension. Return Value real(kind=qp) Real number with the population standard deviation of values.","tags":"","loc":"interface/pstdev.html"},{"title":"mkdir – Fortran Utilities","text":"public function mkdir(dir, ignoreErrors) result(res) Creates a directory. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: dir Path and name of the directory to be created. logical, intent(in), optional :: ignoreErrors True to print a detailed description of the error message.\n Optional parameter. Default is False. Return Value logical True if the process has been succesful. False in case of error. Contents None","tags":"","loc":"proc/mkdir.html"},{"title":"cp – Fortran Utilities","text":"public function cp(src, dest, ignoreErrors) result(res) Copies a file or directory. Directories are copied recursively.\n Existing files are overwritten. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: src Name of the file to be copied. character(len=*), intent(in) :: dest Name of the destination file. logical, intent(in), optional :: ignoreErrors True to print a detailed description of the error message. \n Optional parameter. Default is False. Return Value logical True if the process has been succesful. False in case of error. Contents None","tags":"","loc":"proc/cp.html"},{"title":"mv – Fortran Utilities","text":"public function mv(src, dest, ignoreErrors) result(res) Moves or renames a file or directory. When moving a directory if the \n destination is an already existing directory which is not empty an error is shown\n and nothing is done. The destination folder must be removed first using function rm. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: src Name of the file to be moved. character(len=*), intent(in) :: dest Name of the destination file. logical, intent(in), optional :: ignoreErrors True to print a detailed description of the error message. \n Optional parameter. Default is False. Return Value logical True if the process has been succesful. False in case of error. Contents None","tags":"","loc":"proc/mv.html"},{"title":"rm – Fortran Utilities","text":"public function rm(fname, ignoreErrors) result(res) Removes a file or directory. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: fname Name of the file or directory to be removed. logical, intent(in), optional :: ignoreErrors True to print a detailed description of the error message. \n Optional parameter. Default is False. Return Value logical True if the process has been succesful. False in case of error. Contents None","tags":"","loc":"proc/rm.html"},{"title":"exists – Fortran Utilities","text":"public function exists(fname) result(res) Checks if a file or directory exists. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: fname Name of the file to be check for existence. Return Value logical True if the file exists. False otherwise. Contents None","tags":"","loc":"proc/exists.html"},{"title":"is_directory – Fortran Utilities","text":"public function is_directory(fname, ignoreErrors) result(res) Checks if a directory exists. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: fname Name of the directory to be checked. logical, intent(in), optional :: ignoreErrors True to print a detailed description of the error message. \n Optional parameter. Default is False. Return Value logical True if fname is a directory. False otherwise. Contents None","tags":"","loc":"proc/is_directory.html"},{"title":"is_empty – Fortran Utilities","text":"public function is_empty(fname, ignoreErrors) result(res) Checks if a file is empty. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: fname Name of the file to be checked. logical, intent(in), optional :: ignoreErrors True to print a detailed description of the error message. \n Optional parameter. Default is False. Return Value logical True if fname is an empty file. False otherwise. Contents None","tags":"","loc":"proc/is_empty.html"},{"title":"is_regular_file – Fortran Utilities","text":"public function is_regular_file(fname, ignoreErrors) result(res) Checks if a regular file exists: it is not a directory, symlink, etc. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: fname Name of the file to be checked. logical, intent(in), optional :: ignoreErrors True to print a detailed description of the error message. \n Optional parameter. Default is False. Return Value logical True if fname is a regular file. False otherwise. Contents None","tags":"","loc":"proc/is_regular_file.html"},{"title":"is_path_absolute – Fortran Utilities","text":"public function is_path_absolute(fname) result(res) Determines if a path is absolute or not. Returns True if path is absolute\n and False if path is relative. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: fname Path to a file. Return Value logical True if the path is absolute and false if the path is relative. Contents None","tags":"","loc":"proc/is_path_absolute.html"},{"title":"is_path_relative – Fortran Utilities","text":"public function is_path_relative(fname) result(res) Determines if a path is relative or not. Returns True if path is relative\n and False if path is absolute. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: fname Path to a file. Return Value logical True if the path is relative and false if the path is absolute. Contents None","tags":"","loc":"proc/is_path_relative.html"},{"title":"extension – Fortran Utilities","text":"public function extension(fname) result(res) Determines the extension of a file given its name or path. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: fname Filename or path to a file. Return Value character(len=:),\n  ALLOCATABLE Extension of the file including the \"dot\". Empty path is returned if no extension is found. Contents None","tags":"","loc":"proc/extension.html"},{"title":"count_digits_integer – Fortran Utilities","text":"public interface count_digits_integer Counts the number of digits of an integer, including the - sign \n in case it is a negative value. Contents Module Procedures count_digits_integer_i8 count_digits_integer_i16 count_digits_integer_i32 count_digits_integer_i64 Module Procedures private pure function count_digits_integer_i8(i) result(num_digits) Arguments Type Intent Optional Attributes Name integer(kind=i8), intent(in) :: i Integer number whose digits are to be counted. Return Value integer(kind=i8) The number of digits of the input number. private pure function count_digits_integer_i16(i) result(num_digits) Arguments Type Intent Optional Attributes Name integer(kind=i16), intent(in) :: i Integer number whose digits are to be counted. Return Value integer(kind=i16) The number of digits of the input number. private pure function count_digits_integer_i32(i) result(num_digits) Arguments Type Intent Optional Attributes Name integer(kind=i32), intent(in) :: i Integer number whose digits are to be counted. Return Value integer(kind=i32) The number of digits of the input number. private pure function count_digits_integer_i64(i) result(num_digits) Arguments Type Intent Optional Attributes Name integer(kind=i64), intent(in) :: i Integer number whose digits are to be counted. Return Value integer(kind=i64) The number of digits of the input number.","tags":"","loc":"interface/count_digits_integer.html"},{"title":"is_nan – Fortran Utilities","text":"public interface is_nan Determines if the value of the input variable is NaN. Contents Module Procedures is_nan_sp is_nan_dp is_nan_qp Module Procedures private elemental function is_nan_sp(val) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: val Value to analize. It can have any rank and dimension Return Value logical True if the variable is NaN. False otherwise. It will\n have the same rank and dimension as the input value. private elemental function is_nan_dp(val) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: val Value to analize. It can have any rank and dimension Return Value logical True if the variable is NaN. False otherwise. It will\n have the same rank and dimension as the input value. private elemental function is_nan_qp(val) result(res) Arguments Type Intent Optional Attributes Name real(kind=qp), intent(in) :: val Value to analize. It can have any rank and dimension Return Value logical True if the variable is NaN. False otherwise. It will\n have the same rank and dimension as the input value.","tags":"","loc":"interface/is_nan.html"},{"title":"is_inf – Fortran Utilities","text":"public interface is_inf Determines if the value of the input variable is NaN. Contents Module Procedures is_inf_sp is_inf_dp is_inf_qp Module Procedures private elemental function is_inf_sp(val) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: val Value to analize. It can have any rank and dimension Return Value logical True if the variable is Inf. False otherwise. It will\n have the same rank and dimension as the input value. private elemental function is_inf_dp(val) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: val Value to analize. It can have any rank and dimension Return Value logical True if the variable is Inf. False otherwise. It will\n have the same rank and dimension as the input value. private elemental function is_inf_qp(val) result(res) Arguments Type Intent Optional Attributes Name real(kind=qp), intent(in) :: val Value to analize. It can have any rank and dimension Return Value logical True if the variable is Inf. False otherwise. It will\n have the same rank and dimension as the input value.","tags":"","loc":"interface/is_inf.html"},{"title":"FU_Prec – Fortran Utilities","text":"Precision parameters to use in Fortran programs with real or integer variable types. Uses iso_fortran_env Contents Variables sp dp qp i8 i16 i32 i64 Variables Type Visibility Attributes Name Initial integer, public, parameter :: sp = REAL32 Kind parameter to specify a real type with a storage size of 32 bits. integer, public, parameter :: dp = REAL64 Kind parameter to specify a real type with a storage size of 64 bits. integer, public, parameter :: qp = REAL128 Kind parameter to specify a real type with a storage size of 128 bits. integer, public, parameter :: i8 = INT8 Kind parameter to specify an integer type with a storage size of 8 bits. integer, public, parameter :: i16 = INT16 Kind parameter to specify an integer type with a storage size of 16 bits. integer, public, parameter :: i32 = INT32 Kind parameter to specify an integer type with a storage size of 32 bits. integer, public, parameter :: i64 = INT64 Kind parameter to specify an integer type with a storage size of 64 bits.","tags":"","loc":"module/fu_prec.html"},{"title":"FU_Strings – Fortran Utilities","text":"Useful tools to manipulate strings in Fortran programs. Uses FU_Prec Contents Variables exit_error_code Interfaces splitstr num2str int2str00000 str2num Functions startsWith endsWith replace Variables Type Visibility Attributes Name Initial integer, private, parameter :: exit_error_code = 10 Error code issued by all functions in module Strings_M Interfaces public interface splitstr Splits a string. Read more… private function splitstr_i8(str, fieldNumber, delimiter, rev) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String that the user wants to split. integer(kind=i8), intent(in) :: fieldNumber Integer indicating which of the divisions to return. character(len=*), intent(in), optional :: delimiter String that the users wants to use as a delimiter for splitting.\n Optional parameter. Default is Space. logical, intent(in), optional :: rev If true start spliting by the end of the string.\n Optional parameter. Default is False. Return Value character(len=:),\n  ALLOCATABLE A string with the selected part of str. If the fieldNumber does not exists\n or if the delimiter does not exists it returns an empty string. private function splitstr_i16(str, fieldNumber, delimiter, rev) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String that the user wants to split. integer(kind=i16), intent(in) :: fieldNumber Integer indicating which of the divisions to return. character(len=*), intent(in), optional :: delimiter String that the users wants to use as a delimiter for splitting.\n Optional parameter. Default is Space. logical, intent(in), optional :: rev If true start spliting by the end of the string.\n Optional parameter. Default is False. Return Value character(len=:),\n  ALLOCATABLE A string with the selected part of str. If the fieldNumber does not exists\n or if the delimiter does not exists it returns an empty string. private function splitstr_i32(str, fieldNumber, delimiter, rev) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String that the user wants to split. integer(kind=i32), intent(in) :: fieldNumber Integer indicating which of the divisions to return. character(len=*), intent(in), optional :: delimiter String that the users wants to use as a delimiter for splitting.\n Optional parameter. Default is Space. logical, intent(in), optional :: rev If true start spliting by the end of the string.\n Optional parameter. Default is False. Return Value character(len=:),\n  ALLOCATABLE A string with the selected part of str. If the fieldNumber does not exists\n or if the delimiter does not exists it returns an empty string. private function splitstr_i64(str, fieldNumber, delimiter, rev) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String that the user wants to split. integer(kind=i64), intent(in) :: fieldNumber Integer indicating which of the divisions to return. character(len=*), intent(in), optional :: delimiter String that the users wants to use as a delimiter for splitting.\n Optional parameter. Default is Space. logical, intent(in), optional :: rev If true start spliting by the end of the string.\n Optional parameter. Default is False. Return Value character(len=:),\n  ALLOCATABLE A string with the selected part of str. If the fieldNumber does not exists\n or if the delimiter does not exists it returns an empty string. public interface num2str Converts number into a string. Read more… private function num2str_i8(num) result(str) Arguments Type Intent Optional Attributes Name integer(kind=i8), intent(in) :: num Number to convert to string. Return Value character(len=:),\n  ALLOCATABLE String containing the number private function num2str_i16(num) result(str) Arguments Type Intent Optional Attributes Name integer(kind=i16), intent(in) :: num Number to convert to string. Return Value character(len=:),\n  ALLOCATABLE String containing the number private function num2str_i32(num) result(str) Arguments Type Intent Optional Attributes Name integer(kind=i32), intent(in) :: num Number to convert to string. Return Value character(len=:),\n  ALLOCATABLE String containing the number private function num2str_i64(num) result(str) Arguments Type Intent Optional Attributes Name integer(kind=i64), intent(in) :: num Number to convert to string. Return Value character(len=:),\n  ALLOCATABLE String containing the number private function num2str_sp(num, formato) result(str) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: num Number to convert to string. character(len=*), intent(in) :: formato Format to use in the string variable. Only for real numbers. Return Value character(len=:),\n  ALLOCATABLE String containing the number private function num2str_dp(num, formato) result(str) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: num Number to convert to string. character(len=*), intent(in) :: formato Format to use in the string variable. Only for real numbers. Return Value character(len=:),\n  ALLOCATABLE String containing the number private function num2str_qp(num, formato) result(str) Arguments Type Intent Optional Attributes Name real(kind=qp), intent(in) :: num Number to convert to string. character(len=*), intent(in) :: formato Format to use in the string variable. Only for real numbers. Return Value character(len=:),\n  ALLOCATABLE String containing the number public interface int2str00000 Converts an integer into a string filling with leading zeros. Read more… private function int2str00000_i8(integ, total_length) result(str) Arguments Type Intent Optional Attributes Name integer(kind=i8), intent(in) :: integ Integer number to convert. This number MUST be positive. integer(kind=i8), intent(in) :: total_length Number of digits to use, including zeros. This number MUST be positive. Return Value character(len=:),\n  ALLOCATABLE String containing the number. private function int2str00000_i16(integ, total_length) result(str) Arguments Type Intent Optional Attributes Name integer(kind=i16), intent(in) :: integ Integer number to convert. This number MUST be positive. integer(kind=i16), intent(in) :: total_length Number of digits to use, including zeros. This number MUST be positive. Return Value character(len=:),\n  ALLOCATABLE String containing the number. private function int2str00000_i32(integ, total_length) result(str) Arguments Type Intent Optional Attributes Name integer(kind=i32), intent(in) :: integ Integer number to convert. This number MUST be positive. integer(kind=i32), intent(in) :: total_length Number of digits to use, including zeros. This number MUST be positive. Return Value character(len=:),\n  ALLOCATABLE String containing the number. private function int2str00000_i64(integ, total_length) result(str) Arguments Type Intent Optional Attributes Name integer(kind=i64), intent(in) :: integ Integer number to convert. This number MUST be positive. integer(kind=i64), intent(in) :: total_length Number of digits to use, including zeros. This number MUST be positive. Return Value character(len=:),\n  ALLOCATABLE String containing the number. public interface str2num Converts a string into an integer or real. Read more… private function str2num_i8(str, mold) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String to convert to number. integer(kind=i8), intent(in) :: mold Real or integer value to identify the type and kind of the output.\n It is only used to set the type of the return value, so it can be any value. Return Value integer(kind=i8) The number of the input string. private function str2num_i16(str, mold) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String to convert to number. integer(kind=i16), intent(in) :: mold Real or integer value to identify the type and kind of the output.\n It is only used to set the type of the return value, so it can be any value. Return Value integer(kind=i16) The number of the input string. private function str2num_i32(str, mold) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String to convert to number. integer(kind=i32), intent(in) :: mold Real or integer value to identify the type and kind of the output.\n It is only used to set the type of the return value, so it can be any value. Return Value integer(kind=i32) The number of the input string. private function str2num_i64(str, mold) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String to convert to number. integer(kind=i64), intent(in) :: mold Real or integer value to identify the type and kind of the output.\n It is only used to set the type of the return value, so it can be any value. Return Value integer(kind=i64) The number of the input string. private function str2num_sp(str, mold) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String to convert to number. real(kind=sp), intent(in) :: mold Real or integer value to identify the type and kind of the output.\n It is only used to set the type of the return value, so it can be any value. Return Value real(kind=sp) The number of the input string. private function str2num_dp(str, mold) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String to convert to number. real(kind=dp), intent(in) :: mold Real or integer value to identify the type and kind of the output.\n It is only used to set the type of the return value, so it can be any value. Return Value real(kind=dp) The number of the input string. private function str2num_qp(str, mold) result(res) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String to convert to number. real(kind=qp), intent(in) :: mold Real or integer value to identify the type and kind of the output.\n It is only used to set the type of the return value, so it can be any value. Return Value real(kind=qp) The number of the input string. Functions public function startsWith (str, substr) result(res) Author Emilio Castro. Date 07/05/2020. License MIT. Version 1.0. Checks if a string starts with a given substring. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String that the user wants to check how it starts. character(len=*), intent(in) :: substr Substring to search to check if str starts with it. Return Value logical True if the string starts with the substring and False otherwise. If\n substr is empty it returns True. public function endsWith (str, substr) result(res) Author Emilio Castro. Date 07/05/2020. License MIT. Version 1.0. Checks if a string ends with a given substring. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String that the user wants to check how it ends. character(len=*), intent(in) :: substr Substring to search to check if str ends with it. Return Value logical True if the string ends with the substring and False otherwise. If \n substr is empty it returns True. public pure function replace (str, search, repla) result(res) Author Emilio Castro. Date 10/07/2020. License MIT. Version 1.0. Searches and replaces a substring in a string Read more… Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str String to modify character(len=*), intent(in) :: search String to search in str. character(len=*), intent(in) :: repla String to replace in str. Return Value character(len=:),\n  ALLOCATABLE Modified string.","tags":"","loc":"module/fu_strings.html"},{"title":"FU_Statistics – Fortran Utilities","text":"Statistics tools for Fortran programs. Uses FU_Prec Contents Interfaces mean gmean variance stdev pvariance pstdev Interfaces public interface mean Calculates the mean value. Read more… private pure function mean_sp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the mean value. It can\n have any size and it must have one dimension. Return Value real(kind=sp) Real number with the average of values. private pure function mean_dp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the mean value. It can\n have any size and it must have one dimension. Return Value real(kind=dp) Real number with the average of values. private pure function mean_qp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=qp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the mean value. It can\n have any size and it must have one dimension. Return Value real(kind=qp) Real number with the average of values. public interface gmean Calculates the geometric mean. Read more… private pure function gmean_sp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the geometric mean. It can\n have any size and it must have one dimension. Return Value real(kind=sp) Real number with the geometric mean of the values. private pure function gmean_dp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the geometric mean. It can\n have any size and it must have one dimension. Return Value real(kind=dp) Real number with the geometric mean of the values. private pure function gmean_qp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=qp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the geometric mean. It can\n have any size and it must have one dimension. Return Value real(kind=qp) Real number with the geometric mean of the values. public interface variance Calculates the sample variance. Read more… private pure function variance_sp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the sample variance. It can\n have any size and it must have one dimension. Return Value real(kind=sp) Real number with the sample variance of values. private pure function variance_dp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the sample variance. It can\n have any size and it must have one dimension. Return Value real(kind=dp) Real number with the sample variance of values. private pure function variance_qp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=qp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the sample variance. It can\n have any size and it must have one dimension. Return Value real(kind=qp) Real number with the sample variance of values. public interface stdev Calculates the sample standard deviation. Read more… private pure function stdev_sp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the sample standard deviation.\n It can have any size and it must have one dimension. Return Value real(kind=sp) Real number with the sample standard deviation of values. private pure function stdev_dp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the sample standard deviation.\n It can have any size and it must have one dimension. Return Value real(kind=dp) Real number with the sample standard deviation of values. private pure function stdev_qp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=qp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the sample standard deviation.\n It can have any size and it must have one dimension. Return Value real(kind=qp) Real number with the sample standard deviation of values. public interface pvariance Calculates the population variance. Read more… private pure function pvariance_sp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the population variance.\n It can have any size and it must have one dimension. Return Value real(kind=sp) Real number with the variance of values. private pure function pvariance_dp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the population variance.\n It can have any size and it must have one dimension. Return Value real(kind=dp) Real number with the variance of values. private pure function pvariance_qp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=qp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the population variance.\n It can have any size and it must have one dimension. Return Value real(kind=qp) Real number with the variance of values. public interface pstdev Calculates the population standard deviation. Read more… private pure function pstdev_sp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the population standard deviation. \n It can have any size and it must have one dimension. Return Value real(kind=sp) Real number with the population standard deviation of values. private pure function pstdev_dp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the population standard deviation. \n It can have any size and it must have one dimension. Return Value real(kind=dp) Real number with the population standard deviation of values. private pure function pstdev_qp(values) result(res) Arguments Type Intent Optional Attributes Name real(kind=qp), intent(in), DIMENSION(:) :: values Vector of real numbers to calculate the population standard deviation. \n It can have any size and it must have one dimension. Return Value real(kind=qp) Real number with the population standard deviation of values.","tags":"","loc":"module/fu_statistics.html"},{"title":"FU_Files – Fortran Utilities","text":"Useful tools to manipulate files in Fortran programs. Uses iso_c_binding Contents Variables filesep Functions mkdir cp mv rm exists is_directory is_empty is_regular_file is_path_absolute is_path_relative extension Variables Type Visibility Attributes Name Initial character, public, parameter :: filesep = '/' Path separator: '\\' for Windows and '/' for Linux, MacOS and other OS. Functions public function mkdir (dir, ignoreErrors) result(res) Author Emilio Castro. Date 16/06/2020. License MIT. Version 1.0. Creates a directory. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: dir Path and name of the directory to be created. logical, intent(in), optional :: ignoreErrors True to print a detailed description of the error message.\n Optional parameter. Default is False. Return Value logical True if the process has been succesful. False in case of error. public function cp (src, dest, ignoreErrors) result(res) Author Emilio Castro. Date 16/06/2020. License MIT. Version 1.0. Copies a file or directory. Read more… Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: src Name of the file to be copied. character(len=*), intent(in) :: dest Name of the destination file. logical, intent(in), optional :: ignoreErrors True to print a detailed description of the error message. \n Optional parameter. Default is False. Return Value logical True if the process has been succesful. False in case of error. public function mv (src, dest, ignoreErrors) result(res) Author Emilio Castro. Date 16/06/2020. License MIT. Version 1.0. Moves or renames a file or directory. Read more… Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: src Name of the file to be moved. character(len=*), intent(in) :: dest Name of the destination file. logical, intent(in), optional :: ignoreErrors True to print a detailed description of the error message. \n Optional parameter. Default is False. Return Value logical True if the process has been succesful. False in case of error. public function rm (fname, ignoreErrors) result(res) Author Emilio Castro. Date 16/06/2020. License MIT. Version 1.0. Removes a file or directory. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: fname Name of the file or directory to be removed. logical, intent(in), optional :: ignoreErrors True to print a detailed description of the error message. \n Optional parameter. Default is False. Return Value logical True if the process has been succesful. False in case of error. public function exists (fname) result(res) Author Emilio Castro. Date 16/06/2020. License MIT. Version 1.0. Checks if a file or directory exists. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: fname Name of the file to be check for existence. Return Value logical True if the file exists. False otherwise. public function is_directory (fname, ignoreErrors) result(res) Author Emilio Castro. Date 16/06/2020. License MIT. Version 1.0. Checks if a directory exists. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: fname Name of the directory to be checked. logical, intent(in), optional :: ignoreErrors True to print a detailed description of the error message. \n Optional parameter. Default is False. Return Value logical True if fname is a directory. False otherwise. public function is_empty (fname, ignoreErrors) result(res) Author Emilio Castro. Date 16/06/2020. License MIT. Version 1.0. Checks if a file is empty. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: fname Name of the file to be checked. logical, intent(in), optional :: ignoreErrors True to print a detailed description of the error message. \n Optional parameter. Default is False. Return Value logical True if fname is an empty file. False otherwise. public function is_regular_file (fname, ignoreErrors) result(res) Author Emilio Castro. Date 16/06/2020. License MIT. Version 1.0. Checks if a regular file exists: it is not a directory, symlink, etc. Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: fname Name of the file to be checked. logical, intent(in), optional :: ignoreErrors True to print a detailed description of the error message. \n Optional parameter. Default is False. Return Value logical True if fname is a regular file. False otherwise. public function is_path_absolute (fname) result(res) Author Emilio Castro. Date 27/07/2020. License MIT. Version 1.0. Determines if a path is absolute or not Read more… Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: fname Path to a file. Return Value logical True if the path is absolute and false if the path is relative. public function is_path_relative (fname) result(res) Author Emilio Castro. Date 27/07/2020. License MIT. Version 1.0. Determines if a path is relative or not Read more… Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: fname Path to a file. Return Value logical True if the path is relative and false if the path is absolute. public function extension (fname) result(res) Author Emilio Castro. Date 27/07/2020. License MIT. Version 1.0. Determines the extension of a file. Read more… Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: fname Filename or path to a file. Return Value character(len=:),\n  ALLOCATABLE Extension of the file including the \"dot\". Empty path is returned if no extension is found.","tags":"","loc":"module/fu_files.html"},{"title":"FU_Numbers – Fortran Utilities","text":"Functions to analyze numbers in Fortran programs. Some of these functions (is_nan and is_inf)\n are now available in the intrinsics module IEEE_ARITHMETIC and\n are provided here only for compatibility with some old programs that use them. Uses ieee_arithmetic FU_Prec Contents Interfaces count_digits_integer is_nan is_inf Interfaces public interface count_digits_integer Counts the number of digits of an integer. Read more… private pure function count_digits_integer_i8(i) result(num_digits) Arguments Type Intent Optional Attributes Name integer(kind=i8), intent(in) :: i Integer number whose digits are to be counted. Return Value integer(kind=i8) The number of digits of the input number. private pure function count_digits_integer_i16(i) result(num_digits) Arguments Type Intent Optional Attributes Name integer(kind=i16), intent(in) :: i Integer number whose digits are to be counted. Return Value integer(kind=i16) The number of digits of the input number. private pure function count_digits_integer_i32(i) result(num_digits) Arguments Type Intent Optional Attributes Name integer(kind=i32), intent(in) :: i Integer number whose digits are to be counted. Return Value integer(kind=i32) The number of digits of the input number. private pure function count_digits_integer_i64(i) result(num_digits) Arguments Type Intent Optional Attributes Name integer(kind=i64), intent(in) :: i Integer number whose digits are to be counted. Return Value integer(kind=i64) The number of digits of the input number. public interface is_nan Determines if the value of the input variable is NaN. private elemental function is_nan_sp(val) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: val Value to analize. It can have any rank and dimension Return Value logical True if the variable is NaN. False otherwise. It will\n have the same rank and dimension as the input value. private elemental function is_nan_dp(val) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: val Value to analize. It can have any rank and dimension Return Value logical True if the variable is NaN. False otherwise. It will\n have the same rank and dimension as the input value. private elemental function is_nan_qp(val) result(res) Arguments Type Intent Optional Attributes Name real(kind=qp), intent(in) :: val Value to analize. It can have any rank and dimension Return Value logical True if the variable is NaN. False otherwise. It will\n have the same rank and dimension as the input value. public interface is_inf Determines if the value of the input variable is Infinity. Read more… private elemental function is_inf_sp(val) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: val Value to analize. It can have any rank and dimension Return Value logical True if the variable is Inf. False otherwise. It will\n have the same rank and dimension as the input value. private elemental function is_inf_dp(val) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: val Value to analize. It can have any rank and dimension Return Value logical True if the variable is Inf. False otherwise. It will\n have the same rank and dimension as the input value. private elemental function is_inf_qp(val) result(res) Arguments Type Intent Optional Attributes Name real(kind=qp), intent(in) :: val Value to analize. It can have any rank and dimension Return Value logical True if the variable is Inf. False otherwise. It will\n have the same rank and dimension as the input value.","tags":"","loc":"module/fu_numbers.html"}]}